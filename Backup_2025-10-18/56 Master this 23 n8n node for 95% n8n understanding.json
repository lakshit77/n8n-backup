{
  "createdAt": "2025-10-17T17:28:08.423Z",
  "updatedAt": "2025-10-17T19:05:36.000Z",
  "id": "4ULbZMhAUWmw6dxF",
  "name": "56 Master this 23 n8n node for 95% n8n understanding",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "# üé¨ COMPLETE N8N NODES GUIDE\n## Master n8n with These 23 Essential Nodes\n\nThis workflow covers 95% of what you'll ever need in automation.\n\nüëâ Follow the flow from left to right\nüëâ Each section builds on the previous one\nüëâ Test each node as you learn\n\n**Video Chapters:**\n1. Triggers (How to Start)\n2. Data Storage (Saving Info)\n3. Data Transformation (Shaping Data)\n4. Logic & Routing (Making Decisions)\n5. External Connections (APIs)\n6. AI Integration (Intelligence)\n7. Utilities (Pro Features)",
        "height": 480,
        "width": 638,
        "color": 3
      },
      "id": "2705c4f2-b35e-40b9-b188-0da0dd1f8bb2",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1824,
        -336
      ]
    },
    {
      "parameters": {
        "content": "## üöÄ SECTION 1: TRIGGERS\n### (How Automations Start)\n\nEvery automation needs a trigger - the event that kicks everything off.\n\n**Choose based on your needs:**\n- Testing? ‚Üí Manual Trigger\n- Scheduled tasks? ‚Üí Schedule Trigger  \n- Real-time events? ‚Üí Webhook\n- App events? ‚Üí App-specific Triggers\n\n**Pro Tip:** Always start with Manual Trigger when building. Switch to other triggers once tested!",
        "height": 392,
        "width": 448,
        "color": 4
      },
      "id": "e08193aa-d5c9-4ae4-8ab4-dc4e92227499",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -176,
        1184
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£ MANUAL TRIGGER\n\n**What it does:**\nLets you run the workflow manually by clicking \"Execute Workflow\"\n\n**When to use:**\n- Testing workflows during development\n- On-demand execution\n- Debugging issues\n- Training and demos\n\n**Best Practice:**\nStart EVERY workflow with this while building. Replace it with the real trigger only when ready to go live.\n\n**Example:**\nClick ‚Üí Workflow runs ‚Üí Test your logic",
        "height": 464,
        "width": 280
      },
      "id": "036278d0-ecb5-4e99-b89a-f41d2508cd2f",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        384,
        448
      ]
    },
    {
      "parameters": {
        "content": "### 2Ô∏è‚É£ SCHEDULE TRIGGER\n\n**What it does:**\nRuns your workflow automatically at specific times\n\n**When to use:**\n- Daily reports (every day at 9 AM)\n- Weekly data syncs (Mondays at midnight)\n- Monthly invoicing (1st of each month)\n- Hourly monitoring (every 15 minutes)\n\n**Settings:**\n- Seconds/Minutes/Hours/Days/Weeks/Months\n- Custom CRON expressions for complex schedules\n\n**Examples:**\n- Daily content generation ‚Üí 12:00 AM\n- Weekly backup ‚Üí Sundays 2:00 AM\n- Hourly API sync ‚Üí Every hour at :00",
        "height": 428,
        "width": 280
      },
      "id": "4f7ec1e0-6f7d-4589-8d0d-46971faa1a94",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        384,
        928
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "2950ed69-7b5a-4133-a07c-d82620dfc33d",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        720,
        1088
      ]
    },
    {
      "parameters": {
        "content": "### 3Ô∏è‚É£ WEBHOOK TRIGGER\n\n**What it does:**\nReceives data from external sources in real-time\n\n**When to use:**\n- Form submissions (Typeform, Google Forms)\n- Payment notifications (Stripe, PayPal)\n- App events (Zapier, Make, custom apps)\n- API integrations\n\n**How it works:**\n1. n8n gives you a unique URL\n2. Send data to this URL from anywhere\n3. Workflow triggers instantly\n\n**Test vs Production:**\n- Test URL: For development\n- Production URL: For live workflows\n\n**Example:**\nForm Submit ‚Üí Webhook catches data ‚Üí Process it",
        "height": 596,
        "width": 280
      },
      "id": "a029fdab-fb89-4883-b49e-5f8a339daf30",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        384,
        1376
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "form-submission",
        "options": {}
      },
      "id": "7dcda6f4-9f8f-43f8-91f2-abd39e45c35f",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        720,
        1616
      ],
      "webhookId": "15a1f80c-efa3-4242-a2ce-490dc8a74429"
    },
    {
      "parameters": {
        "content": "### 4Ô∏è‚É£ APP TRIGGERS\n\n**What it does:**\nStarts workflow when something happens in a specific app\n\n**Popular Triggers:**\n- üìß Gmail: New email received\n- üìù Typeform: Form submitted\n- üí¨ Slack: New message posted\n- üìÖ Google Calendar: Event created\n- üõí Shopify: New order\n- üìä Google Sheets: Row added\n\n**How to find:**\nSearch for your app ‚Üí Look for \"Trigger\" nodes\n\n**Example Flow:**\nNew Gmail ‚Üí Extract data ‚Üí Categorize ‚Üí Route to correct team\n\n**500+ apps available!**",
        "height": 496,
        "width": 280
      },
      "id": "4bf5f2ac-2c94-4239-9f36-4673f0845203",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        384,
        2064
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {}
      },
      "id": "62266459-cb10-4b8a-917b-9e45f1688438",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.1,
      "position": [
        720,
        2160
      ]
    },
    {
      "parameters": {
        "content": "## üíæ SECTION 2: DATA STORAGE\n### (Saving Information)\n\nStore data from your automations for later use.\n\n**Most Popular Options:**\n1. Google Sheets - Easiest, everyone knows it\n2. Airtable - More powerful, better for complex data\n3. Databases - PostgreSQL, MySQL (advanced)\n\n**Common Operations:**\n- **Create/Append:** Add new records\n- **Read/Get:** Retrieve existing data  \n- **Update:** Modify records\n- **Delete:** Remove records\n- **Lookup:** Search for specific data",
        "height": 396,
        "width": 400,
        "color": 4
      },
      "id": "43851fbd-db86-41d3-bd8b-5940378683d9",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1104,
        1232
      ]
    },
    {
      "parameters": {
        "content": "### 5Ô∏è‚É£ GOOGLE SHEETS\n\n**What it does:**\nStore and manage data in Google Spreadsheets\n\n**Why use it:**\n- ‚úÖ Everyone knows spreadsheets\n- ‚úÖ Easy to view and edit manually\n- ‚úÖ Great for small to medium data\n- ‚úÖ Share with team members\n- ‚úÖ No learning curve\n\n**Common Operations:**\n- **Append Row:** Add new data to bottom\n- **Update Row:** Modify existing data\n- **Lookup:** Search for specific values\n- **Read:** Get all or specific rows\n- **Delete:** Remove rows\n\n**Perfect for:**\nLeads, contact lists, order tracking, logs, reports\n\n**Limitation:** Not ideal for 10,000+ rows",
        "height": 532,
        "width": 300
      },
      "id": "9b43287d-2575-4e01-bf24-d24623509e45",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1568,
        528
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "",
        "sheetName": "Sheet1",
        "columns": {
          "name": "={{ $json.name }}",
          "email": "={{ $json.email }}",
          "phone": "={{ $json.phone }}"
        },
        "options": {}
      },
      "id": "2823b348-15ea-4f4c-9dfd-64a9034f0004",
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        1920,
        720
      ]
    },
    {
      "parameters": {
        "content": "### 6Ô∏è‚É£ AIRTABLE\n\n**What it does:**\nPowerful database with spreadsheet interface\n\n**Why use it:**\n- ‚úÖ Better for relational data\n- ‚úÖ Link records together\n- ‚úÖ Multiple views (Grid, Calendar, Kanban)\n- ‚úÖ Better data types (attachments, checkboxes)\n- ‚úÖ More scalable than Sheets\n\n**When to choose Airtable:**\n- Customer ‚Üí Orders ‚Üí Products relationships\n- Projects ‚Üí Tasks ‚Üí Team members\n- Inventory management\n- CRM systems\n\n**Operations:**\nSame as Sheets: Create, Read, Update, Delete, Search\n\n**Pro Tip:** If your data has relationships, use Airtable. Otherwise, Sheets is simpler.",
        "height": 600,
        "width": 300
      },
      "id": "33dcc787-771c-4f3a-981c-5311d28acc6b",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1568,
        1120
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "table": ""
      },
      "id": "8462c872-3f15-4be6-b94c-af09b6f97d1f",
      "name": "Airtable",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1920,
        1360
      ]
    },
    {
      "parameters": {
        "content": "## üîÑ SECTION 3: DATA TRANSFORMATION\n### (Manipulating & Shaping Data)\n\nTransform data to match what you need.\n\n**Core Concept:**\nData comes in one format ‚Üí Transform it ‚Üí Output in the format you need\n\n**Key Nodes:**\n- Split Out: Array ‚Üí Individual items\n- Aggregate: Individual items ‚Üí Combined\n- Set/Edit Fields: Create/modify fields\n- Code: Custom transformations\n\n**Think of it as:**\nRaw ingredients ‚Üí Prep & cook ‚Üí Final dish",
        "height": 444,
        "width": 400,
        "color": 4
      },
      "id": "6f58efcb-fde5-4fbd-8996-200c1a45976d",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2320,
        896
      ]
    },
    {
      "parameters": {
        "content": "### 7Ô∏è‚É£ SPLIT OUT\n\n**What it does:**\nConverts an array (list) into individual items\n\n**Why you need it:**\nMost APIs return lists of data. To process each item individually, you must split them out.\n\n**Visual:**\n```\nBEFORE: 1 item (array of 10 emails)\nAFTER: 10 items (each email separate)\n```\n\n**Common Use Cases:**\n- Process each email individually\n- Add each contact to database one by one\n- Send personalized message to each person\n- Check each order status\n\n**Example Flow:**\nGet contacts from API (1 item with 50 contacts) ‚Üí Split Out ‚Üí Now 50 items ‚Üí Process each\n\n**Remember:** Can't add arrays to databases directly. Must split first!",
        "height": 668,
        "width": 444
      },
      "id": "5ec04852-27ce-44e9-a986-538f17c16253",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2768,
        400
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "id": "0d907b55-4a66-42aa-9d4b-7c16b7d91b63",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3408,
        688
      ]
    },
    {
      "parameters": {
        "content": "### 8Ô∏è‚É£ AGGREGATE\n\n**What it does:**\nCombines multiple items back into one\n\n**Why you need it:**\nOpposite of Split Out. After processing items individually, combine them for the next step.\n\n**Visual:**\n```\nBEFORE: 10 items (processed separately)\nAFTER: 1 item (all combined)\n```\n\n**Common Use Cases:**\n- Create summary reports\n- Combine results before sending email\n- Prepare data for bulk operations\n- Generate combined CSV/Excel file\n\n**Example Flow:**\nSplit Out 20 contacts ‚Üí Process each ‚Üí Aggregate ‚Üí Send one email with all results\n\n**Pro Tip:** Use before sending to email/Slack to avoid 20 separate messages!",
        "height": 664,
        "width": 444
      },
      "id": "f4959bda-c800-4ffd-96c1-a8d31fb1d249",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3632,
        400
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "ae4a5f91-1eb7-4e04-82b5-2aa4dbc20ea7",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        4128,
        688
      ]
    },
    {
      "parameters": {
        "content": "### 9Ô∏è‚É£ SET / EDIT FIELDS\n\n**What it does:**\nCreate new fields or modify existing ones\n\n**Why you need it:**\nShape data to match what the next step needs\n\n**Common Operations:**\n- Combine fields: firstName + lastName = fullName\n- Add timestamps: Set 'createdAt' = now\n- Set status: Mark as 'processed'\n- Calculate values: quantity √ó price = total\n- Rename fields: 'email_address' ‚Üí 'email'\n\n**Example Transformations:**\n```\nINPUT: { first: 'John', last: 'Doe' }\nSET: fullName = first + ' ' + last\nOUTPUT: { fullName: 'John Doe' }\n```\n\n**Pro Tip:** Use this before sending to other apps to match their field names!",
        "height": 636,
        "width": 444
      },
      "id": "654fc3b0-fe5a-4d1c-8e7c-6bfff5edc28a",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2768,
        1120
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "example",
              "name": "fullName",
              "value": "={{ $json.firstName }} {{ $json.lastName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "2a997e21-f854-42c4-8463-dc743b341487",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3232,
        1344
      ]
    },
    {
      "parameters": {
        "content": "### üîü CODE NODE\n\n**What it does:**\nWrite custom JavaScript for complex transformations\n\n**When to use:**\n- Complex data transformations (7+ nodes worth)\n- Custom calculations\n- Advanced text parsing\n- Date/time manipulations\n- API response processing\n\n**Don't worry about coding:**\n- ChatGPT can write code for you!\n- Describe what you need ‚Üí Paste code ‚Üí Done\n\n**Example Uses:**\n- Parse unstructured text\n- Complex IF/THEN logic\n- Loop through nested data\n- Custom formatting\n\n**Template:**\n```javascript\nconst items = $input.all();\nreturn items.map(item => ({\n  json: { /* your transformation */ }\n}));\n```",
        "height": 660,
        "width": 460
      },
      "id": "e3345bc9-47e3-417b-ab89-e314aae9e09c",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3424,
        1120
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconsole.log($input.all())\nconst all_items = $input.first().json.items\nfor (const item of all_items) {\n  console.log(item)\n  item.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "id": "10aad727-6e42-4b30-9abc-65882f9a4481",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3920,
        1328
      ]
    },
    {
      "parameters": {
        "content": "## üéØ SECTION 4: LOGIC & ROUTING\n### (Making Decisions)\n\nControl the flow based on conditions.\n\n**The Power of Logic:**\nDifferent data = Different actions\n\n**Key Nodes:**\n- IF: True or False (2 paths)\n- Switch: Multiple conditions (3+ paths)\n- Filter: Stop if conditions not met\n- Merge: Combine parallel branches\n\n**Real-World Examples:**\n- IF email urgent ‚Üí Slack, else ‚Üí ticket\n- Switch by category ‚Üí different teams\n- Filter only orders > $100\n- Merge data from 2 APIs",
        "height": 480,
        "width": 464,
        "color": 4
      },
      "id": "42536b53-5a97-4c63-9a7b-57397f3679e1",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1248,
        3472
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£1Ô∏è‚É£ IF NODE\n\n**What it does:**\nSimple True/False branching\n\n**When to use:**\nWhen you have 2 possible paths\n\n**Common Conditions:**\n- Email contains 'urgent' ‚Üí True\n- Price > $1000 ‚Üí True  \n- Status equals 'approved' ‚Üí True\n- Date is today ‚Üí True\n\n**Example Flows:**\n```\nIF urgent email\n  TRUE ‚Üí Send Slack alert\n  FALSE ‚Üí Create ticket\n\nIF order > $500\n  TRUE ‚Üí Manager approval\n  FALSE ‚Üí Auto-approve\n```\n\n**Conditions Available:**\n- Equals, Not Equals\n- Contains, Not Contains\n- Greater than, Less than\n- Is Empty, Is Not Empty\n- Exists, Does Not Exist",
        "height": 656,
        "width": 316
      },
      "id": "78f8d3af-b363-4732-9d16-55d8ff741a75",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -736,
        3024
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£2Ô∏è‚É£ SWITCH NODE\n\n**What it does:**\nRoute to multiple paths based on conditions\n\n**When to use:**\nWhen you have 3+ possible outcomes\n\n**Advantage over IF:**\nCleaner than chaining multiple IF nodes\n\n**Example: Email Router**\n```\nSwitch by email category:\n- 'Support' ‚Üí Zendesk\n- 'Sales' ‚Üí HubSpot\n- 'Billing' ‚Üí Accounting\n- 'General' ‚Üí Default inbox\n```\n\n**Example: Lead Scorer**\n```\nSwitch by lead score:\n- Score > 80 ‚Üí Hot leads\n- Score 50-80 ‚Üí Warm leads  \n- Score < 50 ‚Üí Cold leads\n```\n\n**Pro Tip:** You can add unlimited routing rules. Each gets its own output path!",
        "height": 648,
        "width": 348
      },
      "id": "70e66b7b-b931-4fa7-b728-d2f7019a374e",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        64,
        3024
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "49e24720-43d7-4010-8052-f7abbb5be418",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        480,
        3296
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£3Ô∏è‚É£ FILTER NODE\n\n**What it does:**\nSTOP workflow if conditions aren't met\n\n**Key Difference from IF:**\n- IF: Continue on both paths\n- Filter: STOP if false, continue if true\n\n**Why use it:**\n- Save processing time\n- Reduce API calls\n- Prevent unnecessary actions\n\n**Common Use Cases:**\n```\n‚úÖ Only process orders > $50\n‚úÖ Only continue if email valid\n‚úÖ Only proceed if status = 'active'\n‚úÖ Only process during business hours\n‚úÖ Only if user verified\n```\n\n**Pro Tip:** Put Filter nodes EARLY in workflows to stop unnecessary processing immediately!\n\n**Example:**\nFilter: Order > $100 ‚Üí FALSE? Stops here. TRUE? Continues.",
        "height": 628,
        "width": 412
      },
      "id": "f57003a3-1cf7-4f94-acef-5ceaf3f16adc",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -736,
        3824
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£4Ô∏è‚É£ MERGE NODE\n\n**What it does:**\nCombine data from multiple branches\n\n**When to use:**\nWorkflow splits into parallel paths, then need to combine results\n\n**Modes:**\n- **Append:** Combine items (default)\n- **Combine:** Merge fields from both inputs\n- **Choose Branch:** Pick one branch's data\n\n**Common Pattern:**\n```\nStart\n  ‚Üì\n  Split into 2 paths:\n  ‚Üí Path A: Get customer data\n  ‚Üí Path B: Get order history\n  ‚Üì\nMerge both ‚Üí Now have combined data\n  ‚Üì\nContinue with full dataset\n```\n\n**Real Example:**\nFetch from API + Query Database ‚Üí Merge ‚Üí Send combined report\n\n**Pro Tip:** Use when you need data from 2+ sources before continuing!",
        "height": 696,
        "width": 396
      },
      "id": "dfb5bf7b-9a29-4cf3-b79b-5ce712803d59",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        16,
        3808
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "name",
        "options": {}
      },
      "id": "472b5ada-6729-4dc7-845c-14b1a9fc602a",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        944,
        4112
      ]
    },
    {
      "parameters": {
        "content": "## üåê SECTION 5: EXTERNAL CONNECTIONS\n### (APIs & Integrations)\n\nConnect to ANY web service, even without native nodes.\n\n**The Reality:**\nn8n has ~400 app nodes.\nThe internet has millions of APIs.\n\n**HTTP Request = Universal Connector**\n\n**What You'll Learn:**\n- Call any API\n- Send/receive data\n- Authenticate\n- Handle responses\n\n**This unlocks EVERYTHING!**",
        "height": 460,
        "width": 400,
        "color": 4
      },
      "id": "bf1384fb-4797-423f-9466-07ece0c37564",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1104,
        3584
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£5Ô∏è‚É£ HTTP REQUEST\n\n**What it does:**\nConnect to ANY web service or API\n\n**Why it's powerful:**\nOnly 400 apps have native n8n nodes. Millions have APIs. This connects you to ALL of them!\n\n**HTTP Methods:**\n- **GET:** Retrieve data (read)\n- **POST:** Send/create data (create)\n- **PUT/PATCH:** Update existing data (update)\n- **DELETE:** Remove data (delete)\n\n**Common Use Cases:**\n- Custom internal APIs\n- New SaaS tools without n8n integration\n- Webhooks to other services\n- Government/public data APIs\n- Weather, maps, finance APIs\n\n**Authentication:**\nSupports: API Keys, OAuth2, Basic Auth, Bearer Token\n\n**Example:**\nGET weather data ‚Üí POST to Slack ‚Üí Update Sheets",
        "height": 664,
        "width": 300
      },
      "id": "83dae93c-502d-4b6f-945b-eeecc2172a94",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1568,
        3072
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.example.com/endpoint",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "da6961e4-7704-4768-8e88-fc370e7cc8fb",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1920,
        3328
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£6Ô∏è‚É£ RESPOND TO WEBHOOK\n\n**What it does:**\nSend data back to the app that triggered your workflow\n\n**When to use:**\n- Form submissions need confirmation\n- API calls expect responses\n- Create two-way communication\n- Return processing results\n\n**How it works:**\n```\n1. Webhook receives data\n2. Workflow processes it\n3. Respond to Webhook sends result back\n```\n\n**Example Flow:**\n```\nWebhook (form submit)\n  ‚Üì\nProcess data\n  ‚Üì\nSave to database\n  ‚Üì\nRespond to Webhook: 'Success! Saved.'\n  ‚Üì\nForm shows confirmation message\n```\n\n**Response Options:**\nText, JSON, HTML, Custom status codes\n\n**Pro Tip:** Always pair with Webhook trigger for real-time feedback!",
        "height": 744,
        "width": 460
      },
      "id": "dcc8e8a1-7af3-4fcf-a69d-44a642bb7d2c",
      "name": "Sticky Note21",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1568,
        3808
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"Data processed successfully\" } }}",
        "options": {}
      },
      "id": "5fc0a58b-5953-410c-81f9-5d3c748d8acf",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2080,
        4128
      ]
    },
    {
      "parameters": {
        "content": "## ü§ñ SECTION 6: AI INTEGRATION\n### (Adding Intelligence)\n\nMake your workflows smart with AI.\n\n**AI Changes Everything:**\n- Understand unstructured data\n- Make smart decisions\n- Generate content\n- Extract information\n- Categorize automatically\n\n**Two Main Approaches:**\n1. **AI Node:** Single-task AI (like asking ChatGPT)\n2. **AI Agent:** Multi-step AI with tools (like a smart assistant)\n\n**This is where automation becomes intelligent!**",
        "height": 448,
        "width": 400,
        "color": 4
      },
      "id": "d956b8a1-94b0-4f2e-b260-cfb49a1b3a2a",
      "name": "Sticky Note22",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2320,
        3536
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£7Ô∏è‚É£ OPENAI / CHATGPT NODE\n\n**What it does:**\nSingle-task AI processing (like using ChatGPT in your workflow)\n\n**Common Use Cases:**\n- üìù Summarize emails/documents\n- üè∑Ô∏è Categorize content (support/sales/billing)\n- ‚úçÔ∏è Generate responses/content\n- üîç Extract data from text\n- üåê Translate languages\n- ‚úÖ Check grammar/spelling\n- üí° Make recommendations\n\n**Prompt Types:**\n- **System:** \"You are a helpful assistant\"\n- **User:** \"Summarize this email in 2 sentences\"\n- **Assistant:** Give examples\n\n**Models Available:**\nGPT-4, GPT-4 Turbo, GPT-3.5\n\n**Example Flow:**\nEmail arrives ‚Üí AI categorizes ‚Üí Switch routes to team\n\n**Pro Tip:** Clear, specific prompts = better results!",
        "height": 648,
        "width": 492
      },
      "id": "6d238a46-79f5-4bbb-bde7-fd9cb4aee3de",
      "name": "Sticky Note23",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2784,
        3072
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£8Ô∏è‚É£ AI AGENT (Advanced)\n\n**What it does:**\nAI assistant that can use tools and take actions\n\n**Key Difference from OpenAI Node:**\n- OpenAI: One task, one response\n- AI Agent: Multi-step, uses tools, remembers context\n\n**What makes it powerful:**\n‚úÖ Conversational (remembers chat history)\n‚úÖ Can use multiple tools (Gmail, Sheets, Calendar)\n‚úÖ Makes decisions on what to do next\n‚úÖ Takes actions on your behalf\n\n**Example Conversation:**\n```\nYou: 'Schedule meeting with John next week'\nAgent: \n  1. Checks your calendar (Tool: Google Calendar)\n  2. Finds available slot\n  3. Drafts email (Tool: Gmail)\n  4. Creates calendar event\n  5. Responds: 'Meeting scheduled for Tuesday 2 PM'\n```\n\n**Use Cases:**\nPersonal assistant, customer support bot, task automation\n\n**Pro Tip:** This is like having a smart employee who knows how to use all your apps!",
        "height": 764,
        "width": 572
      },
      "id": "530850e5-161d-49a7-acbc-b0149cca75bc",
      "name": "Sticky Note24",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2784,
        3760
      ]
    },
    {
      "parameters": {
        "content": "## ‚öôÔ∏è SECTION 7: ESSENTIAL UTILITIES\n### (Power Features & Helpers)\n\nNodes that make your workflows more powerful, reliable, and professional.\n\n**What You'll Learn:**\n- Add delays and pauses\n- Handle errors gracefully\n- Create modular workflows\n- Control execution flow\n- Build production-ready automations\n\n**These separate beginners from pros!**",
        "height": 408,
        "width": 480,
        "color": 4
      },
      "id": "acc8a385-d3b8-4b9d-9fd3-3fcebb9ab8ec",
      "name": "Sticky Note25",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1232,
        5216
      ]
    },
    {
      "parameters": {
        "content": "### 1Ô∏è‚É£9Ô∏è‚É£ WAIT NODE\n\n**What it does:**\nPause workflow execution for a specified time\n\n**When to use:**\n- ‚è±Ô∏è Rate limiting (don't hit API limits)\n- ‚è≥ Give external system time to process\n- üìÖ Schedule follow-ups\n- üîÑ Retry after failure\n- üö¶ Control execution speed\n\n**Wait Options:**\n- Seconds, Minutes, Hours, Days\n- Until specific date/time\n- For webhook response\n\n**Common Examples:**\n```\nSend welcome email\n  ‚Üì\nWait 2 days\n  ‚Üì\nSend follow-up email\n\nOR\n\nCreate user account\n  ‚Üì  \nWait 10 seconds (system processing)\n  ‚Üì\nFetch user details\n```\n\n**Pro Tip:** Use between API calls to avoid rate limits (e.g., 100 requests/minute = wait 0.6s between calls)",
        "height": 764,
        "width": 412
      },
      "id": "ca95335f-c45e-4dd1-a47c-92f05272b3db",
      "name": "Sticky Note26",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -720,
        4704
      ]
    },
    {
      "parameters": {},
      "id": "7441e0fe-1903-4e95-86d3-0a915d759c54",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -240,
        5040
      ],
      "webhookId": "1c37bc55-0c3a-43be-9fe9-1b9b0307e994"
    },
    {
      "parameters": {
        "content": "### 2Ô∏è‚É£0Ô∏è‚É£ ERROR TRIGGER\n\n**What it does:**\nCatches workflow failures and takes action\n\n**Why it's CRITICAL:**\nWithout this, you won't know when workflows break!\n\n**What it catches:**\n- ‚ùå API errors\n- ‚ùå Authentication failures  \n- ‚ùå Timeout errors\n- ‚ùå Invalid data\n- ‚ùå Node execution failures\n\n**Common Actions:**\n- üì¢ Send Slack alert\n- üìß Email admin\n- üìä Log to Google Sheets\n- üîÑ Retry workflow\n- üì± SMS notification\n\n**Example Setup:**\n```\nError Trigger (catches any workflow failure)\n  ‚Üì\nFormat error message\n  ‚Üì\nSend to Slack: 'Workflow X failed: [error details]'\n```\n\n**Pro Tip:** Create ONE error handling workflow, then use it for all your workflows!\n\n**‚ö†Ô∏è MUST-HAVE for production workflows!**",
        "height": 804,
        "width": 524
      },
      "id": "dfbbb832-6fbf-45a1-9bac-237900c5ed08",
      "name": "Sticky Note27",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -16,
        4688
      ]
    },
    {
      "parameters": {},
      "id": "d0d43528-e783-4f10-93a7-5b769329853a",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        608,
        5040
      ]
    },
    {
      "parameters": {
        "content": "### 2Ô∏è‚É£1Ô∏è‚É£ EXECUTE WORKFLOW\n\n**What it does:**\nTrigger another workflow from the current one\n\n**Why use it:**\nBuild modular, reusable automations\n\n**Benefits:**\n‚úÖ Reuse workflows (don't rebuild same logic)\n‚úÖ Keep workflows organized\n‚úÖ Easier to maintain\n‚úÖ Separate concerns\n\n**Common Patterns:**\n```\nMAIN WORKFLOW:\n  Get new leads\n    ‚Üì\n  Execute: 'Enrich Lead Data' workflow\n    ‚Üì\n  Execute: 'Send to CRM' workflow\n    ‚Üì\n  Execute: 'Notify Team' workflow\n```\n\n**Real Example:**\n- Workflow A: Process order\n- Workflow B: Send invoice (reusable)\n- Workflow C: Update inventory (reusable)\n\nWorkflow A executes B and C!\n\n**Pro Tip:** Create a library of reusable workflows for common tasks!",
        "height": 768,
        "width": 444
      },
      "id": "c3ab7b0b-d2f7-47e0-b797-44dba48ad2fb",
      "name": "Sticky Note28",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -608,
        5664
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7d277ecd-e47d-4225-a025-f80b4e4b9143",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        -96,
        5952
      ]
    },
    {
      "parameters": {
        "content": "### 2Ô∏è‚É£2Ô∏è‚É£ LOOP OVER ITEMS\n\n**What it does:**\nProcess items one at a time with delays between each\n\n**Why you need it:**\nPrevent API rate limits!\n\n**The Problem:**\n```\n100 contacts ‚Üí Process all at once\n= 100 API calls in 1 second\n= Rate limit error! ‚ùå\n```\n\n**The Solution:**\n```\n100 contacts ‚Üí Loop Over Items\n  ‚Üì\nProcess item 1 ‚Üí Wait 1 second\nProcess item 2 ‚Üí Wait 1 second\nProcess item 3 ‚Üí Wait 1 second\n...\n= Stays within rate limits ‚úÖ\n```\n\n**Settings:**\n- Max iterations (how many to process)\n- Pause between iterations (delay)\n\n**Use Cases:**\n- Bulk email sending (don't spam)\n- API calls with rate limits\n- Sequential processing\n- Controlled batch operations\n\n**Pro Tip:** Check the API's rate limit (e.g., 60/minute) and set your delay accordingly!",
        "height": 824,
        "width": 396
      },
      "id": "64505b0d-1a53-46a2-9954-ee56fea95828",
      "name": "Sticky Note29",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        5664
      ]
    },
    {
      "parameters": {
        "content": "## üéØ BEST PRACTICES\n### Essential Tips for Success\n\n**1. START SIMPLE**\n‚úÖ Use Manual Trigger for testing\n‚úÖ Build one node at a time\n‚úÖ Test after each node\n‚úÖ Don't build everything at once\n\n**2. ERROR HANDLING**\n‚úÖ ALWAYS add Error Trigger workflow\n‚úÖ Use Try/Catch patterns with IF nodes\n‚úÖ Log failures (Sheets/Slack/Email)\n‚úÖ Add helpful error messages\n\n**3. PERFORMANCE**\n‚úÖ Use Filter early (stop unnecessary processing)\n‚úÖ Batch operations when possible\n‚úÖ Add Wait nodes for rate limits\n‚úÖ Use Loop for controlled processing\n\n**4. ORGANIZATION**\n‚úÖ Name nodes clearly (not just 'HTTP Request')\n‚úÖ Use Sticky Notes for documentation\n‚úÖ Group related workflows\n‚úÖ Version your workflows",
        "height": 560,
        "width": 420
      },
      "id": "b591d4fb-b119-4002-b98d-01ff789b0929",
      "name": "Sticky Note30",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1104,
        5024
      ]
    },
    {
      "parameters": {
        "content": "## üî• 5 COMMON WORKFLOW PATTERNS\n### Copy These Templates!\n\n**PATTERN 1: Form to Database**\n```\nWebhook (form submission)\n  ‚Üì\nSet (format data)\n  ‚Üì\nGoogle Sheets (save)\n  ‚Üì\nRespond to Webhook (confirmation)\n```\n\n**PATTERN 2: Scheduled Report**\n```\nSchedule (daily 9 AM)\n  ‚Üì\nHTTP Request (fetch data)\n  ‚Üì\nAI (summarize)\n  ‚Üì\nEmail (send report)\n```\n\n**PATTERN 3: Smart Email Router**\n```\nGmail Trigger (new email)\n  ‚Üì\nAI (categorize: support/sales/billing)\n  ‚Üì\nSwitch (route by category)\n  ‚Üì\nDifferent actions per category\n```\n\n**PATTERN 4: Data Sync**\n```\nSchedule (hourly)\n  ‚Üì\nApp A (get new records)\n  ‚Üì\nFilter (only modified)\n  ‚Üì\nTransform (format)\n  ‚Üì\nApp B (update/create)\n```\n\n**PATTERN 5: Error Notification**\n```\nError Trigger (any workflow fails)\n  ‚Üì\nSet (format error details)\n  ‚Üì\nSlack (notify team)\n  ‚Üì\nGoogle Sheets (log error)\n```",
        "height": 1180,
        "width": 432
      },
      "id": "0709b270-eac9-44a4-af48-fbb3dd7bd516",
      "name": "Sticky Note31",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1584,
        5024
      ]
    },
    {
      "parameters": {
        "content": "## üìö LEARNING RESOURCES\n\n**Official n8n Resources:**\nüîó docs.n8n.io - Complete documentation\nüîó community.n8n.io - Community forum\nüîó n8n.io/workflows - 1000+ workflow templates\n\n**Practice Exercise:**\nBuild these 3 workflows to master the basics:\n\n**Exercise 1 (Beginner):**\nManual Trigger ‚Üí HTTP Request (get weather) ‚Üí Set (format) ‚Üí Manual output\n\n**Exercise 2 (Intermediate):**\nWebhook ‚Üí Split Out (array) ‚Üí Loop Through ‚Üí Google Sheets (append each)\n\n**Exercise 3 (Advanced):**\nSchedule ‚Üí HTTP Request ‚Üí AI (analyze) ‚Üí IF (check) ‚Üí Switch (route) ‚Üí Multiple endpoints\n\n**Next Steps:**\n1. Import this workflow to your n8n\n2. Test each node individually  \n3. Build one complete automation\n4. Share your success! üéâ",
        "height": 576,
        "width": 400
      },
      "id": "1e59a317-8959-4fe3-8634-6dbd1a22638a",
      "name": "Sticky Note32",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2064,
        5024
      ]
    },
    {
      "parameters": {
        "content": "## ‚ö° QUICK REFERENCE GUIDE\n\n**TRIGGERS (Start)**\n‚Ä¢ Manual - Testing\n‚Ä¢ Schedule - Time-based\n‚Ä¢ Webhook - Real-time events\n‚Ä¢ Apps - 400+ integrations\n\n**STORAGE (Save)**\n‚Ä¢ Google Sheets - Simple\n‚Ä¢ Airtable - Advanced\n‚Ä¢ Databases - Production\n\n**TRANSFORM (Shape)**\n‚Ä¢ Split Out - Array ‚Üí Items\n‚Ä¢ Aggregate - Items ‚Üí One\n‚Ä¢ Set - Create/modify fields\n‚Ä¢ Code - Custom logic\n\n**LOGIC (Decide)**\n‚Ä¢ IF - True/False\n‚Ä¢ Switch - Multiple paths\n‚Ä¢ Filter - Stop if false\n‚Ä¢ Merge - Combine branches\n\n**CONNECT (External)**\n‚Ä¢ HTTP Request - Any API\n‚Ä¢ Respond - Send back data\n\n**AI (Intelligence)**\n‚Ä¢ OpenAI - Single task\n‚Ä¢ AI Agent - Multi-step\n\n**UTILITIES (Helpers)**\n‚Ä¢ Wait - Add delays\n‚Ä¢ Error Trigger - Catch failures\n‚Ä¢ Execute Workflow - Call others\n‚Ä¢ Loop - Controlled iteration\n\n**üìå Bookmark this for quick reference!**",
        "height": 760,
        "width": 360
      },
      "id": "9a1261e6-c22a-476f-9ed8-fd4f6c839da3",
      "name": "Sticky Note33",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2544,
        5024
      ]
    },
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "channelId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        720,
        2352
      ],
      "id": "a861a81d-a110-4339-9227-392f70da30d1",
      "name": "Slack Trigger",
      "webhookId": "ff711af4-44fc-41cd-902b-dda1635c9b66"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "calendarId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "triggerOn": "eventCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTrigger",
      "typeVersion": 1,
      "position": [
        960,
        2160
      ],
      "id": "756c5c92-e155-4c16-bb25-2f73b56e3d1b",
      "name": "Google Calendar Trigger",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "d6M4PVTouNnERS2M",
          "name": "Lakshit Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "event": "rowAdded",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        960,
        2352
      ],
      "id": "0900f43e-651c-400b-9a61-fb51e69af289",
      "name": "Google Sheets Trigger"
    },
    {
      "parameters": {
        "dataTableId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        1920,
        2224
      ],
      "id": "8f00d8a4-0963-4b00-a4cb-072a519c1b06",
      "name": "Insert row"
    },
    {
      "parameters": {
        "content": "### 6Ô∏è‚É£ N8N DATA TABLES\n\n**What it does:**\nNative database built directly into n8n - no external service needed\n\n**Why use it:**\n- ‚úÖ **No setup required** - Works immediately, no credentials\n- ‚úÖ **Lives in n8n** - Data stays in your instance\n- ‚úÖ **Fast performance** - Direct access, no API calls\n- ‚úÖ **Free storage** - No external service costs\n- ‚úÖ **Great for testing** - Quick prototyping\n\n**When to choose n8n Data Tables:**\n- Internal automation data (logs, status tracking)\n- Temporary data storage during workflows\n- Cache/lookup tables\n- Small to medium datasets (under 10,000 records)\n- Don't want external service setup\n\n**When NOT to use:**\n- ‚ùå Need to access data outside n8n\n- ‚ùå Team needs spreadsheet view/editing\n- ‚ùå Very large datasets (100,000+ records)\n\n**Operations:**\nInsert, Read, Update, Delete, Search\n\n**Pro Tip:** \nUse n8n Tables for **workflow-only data**. Use Google Sheets when non-technical team members need access.\n\n**Examples:**\n- Store processed IDs (avoid duplicates)\n- Cache API responses\n- Track workflow execution history\n- Maintain lookup tables",
        "height": 832,
        "width": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1568,
        1760
      ],
      "id": "99ff9f90-5866-4567-b5c1-d89c43bb66f3",
      "name": "Sticky Note34"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "messages": {
          "values": [
            {}
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3344,
        3376
      ],
      "id": "2c5e8d2c-8fb2-4926-8598-bda2ae0ff47c",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "U0FfOj4uWFY6nYAE",
          "name": "Pankaj OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3424,
        3952
      ],
      "id": "f067b011-2ca9-4ada-bc65-df0cfda69ce2",
      "name": "AI Agent1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        832,
        6000
      ],
      "id": "364d4dc6-a992-4a9b-a5fc-2fc85a10c4f6"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        624,
        5984
      ],
      "id": "dc180fef-1594-43f9-a896-509a0d72ee33",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "728eaf2a-bfca-44cd-a8c1-2b6b832e9b07",
              "name": "items",
              "value": "=[\n    {\n      \"name\": \"John Smith\",\n      \"email\": \"john@example.com\",\n      \"phone\": \"+1-555-0101\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Sarah Johnson\",\n      \"email\": \"sarah@example.com\",\n      \"phone\": \"+1-555-0102\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Michael Chen\",\n      \"email\": \"michael@example.com\",\n      \"phone\": \"+1-555-0103\",\n      \"status\": \"pending\"\n    },\n    {\n      \"name\": \"Emily Rodriguez\",\n      \"email\": \"emily@example.com\",\n      \"phone\": \"+1-555-0104\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"David Williams\",\n      \"email\": \"david@example.com\",\n      \"phone\": \"+1-555-0105\",\n      \"status\": \"inactive\"\n    },\n    {\n      \"name\": \"Jessica Brown\",\n      \"email\": \"jessica@example.com\",\n      \"phone\": \"+1-555-0106\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Carlos Martinez\",\n      \"email\": \"carlos@example.com\",\n      \"phone\": \"+1-555-0107\",\n      \"status\": \"pending\"\n    },\n    {\n      \"name\": \"Amanda Taylor\",\n      \"email\": \"amanda@example.com\",\n      \"phone\": \"+1-555-0108\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"James Anderson\",\n      \"email\": \"james@example.com\",\n      \"phone\": \"+1-555-0109\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Lisa Thompson\",\n      \"email\": \"lisa@example.com\",\n      \"phone\": \"+1-555-0110\",\n      \"status\": \"inactive\"\n    }\n]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3232,
        688
      ],
      "id": "c3749ddc-19af-412d-a043-dc1cb0517239",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "728eaf2a-bfca-44cd-a8c1-2b6b832e9b07",
              "name": "name",
              "value": "=Lakshit Ukani",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -384,
        3280
      ],
      "id": "6a1d0bf9-b19a-45f7-864b-2cb7fe659b12",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b7436e9a-3377-49c0-aa1f-c49c59627ead",
              "leftValue": "={{ $json.name }}",
              "rightValue": "lakshit",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -160,
        3280
      ],
      "id": "96813305-9090-4c65-998f-d04ffc9fcdfd",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "728eaf2a-bfca-44cd-a8c1-2b6b832e9b07",
              "name": "name",
              "value": "=Lakshit Ukani",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -272,
        3776
      ],
      "id": "d8e0d512-38bd-4ffd-95ed-199bb7b695ee",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "072884f6-0efd-48c6-81b3-6005ba234f4b",
              "leftValue": "={{ $json.name }}",
              "rightValue": "lakshit",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -192,
        4096
      ],
      "id": "407e7652-4310-4160-9a56-1f122bcc4e54",
      "name": "Filter1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "728eaf2a-bfca-44cd-a8c1-2b6b832e9b07",
              "name": "items",
              "value": "=[\n    {\n      \"name\": \"David Williams\",\n      \"email\": \"david@example.com\",\n      \"phone\": \"+1-555-0105\",\n      \"status\": \"inactive\"\n    },\n    {\n      \"name\": \"Jessica Brown\",\n      \"email\": \"jessica@example.com\",\n      \"phone\": \"+1-555-0106\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Carlos Martinez\",\n      \"email\": \"carlos@example.com\",\n      \"phone\": \"+1-555-0107\",\n      \"status\": \"pending\"\n    },\n    {\n      \"name\": \"Amanda Taylor\",\n      \"email\": \"amanda@example.com\",\n      \"phone\": \"+1-555-0108\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"James Anderson\",\n      \"email\": \"james@example.com\",\n      \"phone\": \"+1-555-0109\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Lisa Thompson\",\n      \"email\": \"lisa@example.com\",\n      \"phone\": \"+1-555-0110\",\n      \"status\": \"inactive\"\n    }\n]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        608,
        4240
      ],
      "id": "05577c0e-1af0-4f77-b2a1-08581c3c4459",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "id": "c402e0a2-0542-4ef7-b3c7-524fc006b0cc",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        784,
        3984
      ]
    },
    {
      "parameters": {},
      "id": "419ddb85-29ec-4ab9-bac4-b1fc2970bfe3",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        432,
        4112
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "id": "03d5c259-b508-4725-ab3c-6422fccf0ab2",
      "name": "Split Out2",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        784,
        4240
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "728eaf2a-bfca-44cd-a8c1-2b6b832e9b07",
              "name": "items",
              "value": "=[\n    {\n      \"name\": \"John Smith\",\n      \"email\": \"john@example.com\",\n      \"phone\": \"+1-555-0101\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Sarah Johnson\",\n      \"email\": \"sarah@example.com\",\n      \"phone\": \"+1-555-0102\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"Michael Chen\",\n      \"email\": \"michael@example.com\",\n      \"phone\": \"+1-555-0103\",\n      \"status\": \"pending\"\n    },\n    {\n      \"name\": \"Emily Rodriguez\",\n      \"email\": \"emily@example.com\",\n      \"phone\": \"+1-555-0104\",\n      \"status\": \"active\"\n    },\n    {\n      \"name\": \"David Williams\",\n      \"email\": \"david@example.com\",\n      \"phone\": \"+1-555-0105\",\n      \"status\": \"inactive\"\n    },\n    {\n      \"name\": \"Jessica Brown\",\n      \"email\": \"jessica@example.com\",\n      \"phone\": \"+1-555-0106\",\n      \"status\": \"active\"\n    }\n]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        608,
        3984
      ],
      "id": "8a51eeec-ea48-4504-ba43-161efe12436c",
      "name": "Edit Fields3"
    }
  ],
  "connections": {
    "Message a model": {
      "main": [
        []
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        []
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "e04971a0-0346-4ec5-854b-7a7d36e23bb9",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-17T17:28:08.429Z",
      "updatedAt": "2025-10-17T17:28:08.429Z",
      "role": "workflow:owner",
      "workflowId": "4ULbZMhAUWmw6dxF",
      "projectId": "iOyc3VpWKvgHH9fv"
    }
  ],
  "tags": []
}
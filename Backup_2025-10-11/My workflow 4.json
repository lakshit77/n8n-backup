{
  "createdAt": "2025-08-16T18:37:22.920Z",
  "updatedAt": "2025-08-26T16:43:13.000Z",
  "id": "EjPmdfDXn9tdS2sy",
  "name": "My workflow 4",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -432,
        -16
      ],
      "id": "1be69cea-7365-4a7f-859d-734325377996",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        -128,
        -16
      ],
      "id": "f5c13e5b-0aa8-41a1-9b9c-577afb80f0ee",
      "name": "Get many workflows",
      "credentials": {
        "n8nApi": {
          "id": "z38UGfyhYW1FuBfC",
          "name": "Hostinger n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cc7188b9-2d6f-4c5e-bbe7-e1e30149814c",
              "name": "folderName",
              "value": "=Backup_{{ $now.format('yyyy-MM-dd') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -288,
        -16
      ],
      "id": "c2dcf746-3d65-469c-b55e-7043269207bc",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        208,
        -16
      ],
      "id": "410dab82-9ce7-4b70-aacf-277206a8f9fa",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "workflow-content",
              "name": "nodes",
              "value": "={{ JSON.stringify($json, null, 2) }}",
              "type": "string"
            },
            {
              "id": "workflow-filename",
              "name": "fileName",
              "value": "={{ $json.name }}.json",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "6047c695-ff24-4bab-bf53-5116a8bc64ea",
      "name": "Prepare File Content",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        0
      ]
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "nodes",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        688,
        0
      ],
      "id": "bb332062-0ede-4cd1-acbe-37d738689cb3",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "lakshit77",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n-backup-2",
          "mode": "list",
          "cachedResultName": "n8n-backup-2",
          "cachedResultUrl": "https://github.com/lakshit77/n8n-backup-2"
        },
        "filePath": "={{ $('Edit Fields').item.json.folderName }}/{{ $('Prepare File Content').item.json.fileName }}",
        "binaryData": true,
        "commitMessage": "={{ $now.setZone('Asia/Kolkata').format('yyyy-MM-dd T') }} Backup completed"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        896,
        0
      ],
      "id": "6fed782f-cb77-41bc-b229-a85110b8dd7d",
      "name": "Create a file",
      "webhookId": "09b9b92d-9e58-4393-b911-98f2ea0d795c",
      "credentials": {
        "githubApi": {
          "id": "z4bTvsI2pravRKl9",
          "name": "Lakshit GitHub account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1gqmegitfHNqya-lEUdaQ16hBVD8okXi2oeGr8V4nWFM",
          "mode": "list",
          "cachedResultName": "Daily backup n8n",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gqmegitfHNqya-lEUdaQ16hBVD8okXi2oeGr8V4nWFM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gqmegitfHNqya-lEUdaQ16hBVD8okXi2oeGr8V4nWFM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "DateTime": "={{$now.setZone('Asia/Kolkata').format('yyyy-MM-dd T')}}",
            "Folder Name": "={{ $('Edit Fields').item.json.folderName }}",
            "File Name": "={{ $('Prepare File Content').item.json.fileName }}",
            "Error Message": "={{ $json.error }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "DateTime",
              "displayName": "DateTime",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Folder Name",
              "displayName": "Folder Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "File Name",
              "displayName": "File Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Error Message",
              "displayName": "Error Message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1104,
        96
      ],
      "id": "18b5aa87-15f2-45ba-bc3c-ebe39b4963eb",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Nn6MoNvB7CWuaQp9",
          "name": "Lakshit Account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "lakshit77",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n-backup-2",
          "mode": "list",
          "cachedResultName": "n8n-backup-2",
          "cachedResultUrl": "https://github.com/lakshit77/n8n-backup-2"
        },
        "filePath": "={{ $('Edit Fields').item.json.folderName }}/README.md",
        "fileContent": "=# N8N Workflow Backup - {{ $('Edit Fields').item.json.folderName }}\nThis folder contains the backup of all N8N workflows as of {{ $now.setZone('Asia/Kolkata').format('yyyy-MM-dd') }}\n\n## Backup Details\n- Backup Time: {{ $now.setZone('Asia/Kolkata').format('yyyy-MM-dd T') }}\n- Total Workflows: {{ $('Get many workflows').all().length }}\n\n## Files\nEach workflow is saved as a separate JSON file with the format\n\n---\n*Automatically generated by N8N Backup Workflow*",
        "commitMessage": "Add README for backup folder"
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        480,
        -160
      ],
      "id": "b0aa2c41-aa58-463e-a6f3-32896230da50",
      "name": "Create a file1",
      "webhookId": "bdf3485c-c498-4f44-b03b-2308ea7e103a",
      "credentials": {
        "githubApi": {
          "id": "z4bTvsI2pravRKl9",
          "name": "Lakshit GitHub account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many workflows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Create a file1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare File Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare File Content": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Create a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a file": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Get many workflows": [
      {
        "json": {
          "createdAt": "2025-08-02T18:26:52.835Z",
          "updatedAt": "2025-08-08T18:35:53.000Z",
          "id": "2ZBIreE7n0mdZu4B",
          "name": "34 AI Agent Update",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "typeVersion": 1.1,
              "position": [
                320,
                32
              ],
              "id": "2a857125-7164-4591-8cca-743f5cdc2ea5",
              "name": "When chat message received",
              "webhookId": "4ebf6ba8-7c45-42cc-8f5b-9ea78406a5a5"
            },
            {
              "parameters": {
                "needsFallback": true,
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                -880,
                32
              ],
              "id": "4d5cfc77-9fb6-4edf-8970-798f6915cde9",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "model": "openai/gpt-4.1-nano",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
              "typeVersion": 1,
              "position": [
                -752,
                288
              ],
              "id": "b99379d9-3abc-4312-87cf-a2c1910b3ada",
              "name": "OpenRouter Chat Model",
              "credentials": {
                "openRouterApi": {
                  "id": "TLy9RuRkIKncoUiy",
                  "name": "OpenRouter Freelance account"
                }
              }
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "value": "gpt-4.1-nano",
                  "mode": "list",
                  "cachedResultName": "gpt-4.1-nano"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                -944,
                304
              ],
              "id": "1f821448-726f-43a9-8f1a-3747e0d55380",
              "name": "OpenAI Chat Model",
              "credentials": {
                "openAiApi": {
                  "id": "4I1YETvg4Cwcgpgl",
                  "name": "OpenAI Fake"
                }
              }
            },
            {
              "parameters": {
                "content": "# Fallback AI Agent\n",
                "height": 80,
                "width": 336
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -960,
                -192
              ],
              "id": "a3a6905d-9ab1-4e35-832f-0c9b146e47db",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "options": {
                  "systemMessage": "=You are Lakshit Overall Main Agent\n\nYou have two tools:\nCalculator: Use this tool when something is asked related to calculating\nCalendar Agent: Call this agent when something is asked regarding Meeting, event, calendar"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                -160,
                16
              ],
              "id": "97c4e6b7-d34d-445b-b291-91effe3d43af",
              "name": "AI Agent1"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "value": "gpt-4.1-nano",
                  "mode": "list",
                  "cachedResultName": "gpt-4.1-nano"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                -432,
                288
              ],
              "id": "2e4fcf0c-962b-4474-b080-e2e2a97215f0",
              "name": "OpenAI Chat Model1",
              "credentials": {
                "openAiApi": {
                  "id": "L3P9Ae81haTD2rYm",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4.1-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                16,
                512
              ],
              "id": "1a4f3887-ea62-4ae5-8f8f-3cfdf966617b",
              "name": "OpenAI Chat Model2",
              "credentials": {
                "openAiApi": {
                  "id": "L3P9Ae81haTD2rYm",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "toolDescription": "You are Lakshit AI Agent specialize in managing his calendar",
                "text": "=You are Lakshit AI Agent specialize in managing his calendar\n\nYou have one tool \ncreate_event: Use this tool when you need to create an event\n\nNote:\n- If no end time is mention, consider 30mins meeting\n- If title is not mention then add any generic title name\n- Don't ask any question back, just create with what information you have\n\nCurrent time and date is {{ $now }}\nI live in India Timezone",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agentTool",
              "typeVersion": 2.2,
              "position": [
                96,
                288
              ],
              "id": "65e49561-fab6-4aa4-8006-419c68d67665",
              "name": "Calendar Agent"
            },
            {
              "parameters": {},
              "type": "@n8n/n8n-nodes-langchain.toolCalculator",
              "typeVersion": 1,
              "position": [
                -128,
                368
              ],
              "id": "90d0fa23-0b53-4463-961b-a76cf7bd6f8a",
              "name": "Calculator"
            },
            {
              "parameters": {},
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                -240,
                288
              ],
              "id": "de4ec1f1-f227-405b-993f-13293e470196",
              "name": "Simple Memory"
            },
            {
              "parameters": {},
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                112,
                496
              ],
              "id": "f18771a7-f344-4e5a-a4bf-c416a284a799",
              "name": "Simple Memory1"
            },
            {
              "parameters": {
                "calendar": {
                  "__rl": true,
                  "value": "lakshitukani77@gmail.com",
                  "mode": "list",
                  "cachedResultName": "Lakshit Ukani"
                },
                "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
                "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
                "additionalFields": {
                  "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
                }
              },
              "type": "n8n-nodes-base.googleCalendarTool",
              "typeVersion": 1.3,
              "position": [
                240,
                512
              ],
              "id": "5f5d7d30-88ad-47ed-a61c-113a0d960e16",
              "name": "create_event",
              "credentials": {
                "googleCalendarOAuth2Api": {
                  "id": "d6M4PVTouNnERS2M",
                  "name": "Lakshit Google Calendar account"
                }
              }
            },
            {
              "parameters": {
                "content": "# AI Agent as tool\n",
                "height": 80,
                "width": 288
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -160,
                -160
              ],
              "id": "4666ff3a-5fbc-4de6-a664-9d111404b278",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "={{ $('When chat message received').item.json.chatInput }}",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                768,
                64
              ],
              "id": "b86e3832-1640-44f8-8bea-1b24eb5250ed",
              "name": "AI Agent2"
            },
            {
              "parameters": {
                "rules": {
                  "rule": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "9fd1623c-54da-4f30-90da-017eb63d2e78",
                            "leftValue": "={{ $('Edit Fields').item.json.model_number }}",
                            "rightValue": "1",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      }
                    },
                    {
                      "modelIndex": 2,
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "63494f1b-80bd-4478-bc20-ee0504058001",
                            "leftValue": "={{ $('Edit Fields').item.json.model_number }}",
                            "rightValue": "2",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      }
                    }
                  ]
                }
              },
              "type": "@n8n/n8n-nodes-langchain.modelSelector",
              "typeVersion": 1,
              "position": [
                688,
                304
              ],
              "id": "7b876101-81d3-4210-8149-131eee8cee45",
              "name": "Model Selector"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "a6c4ade4-639c-4f42-bbf1-17cbe072d429",
                      "name": "model_number",
                      "value": "2",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                576,
                64
              ],
              "id": "42a40ce0-6ec6-4d08-a9cd-6f3945c67d75",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4.1-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                576,
                512
              ],
              "id": "7298c926-ac03-4da1-b85d-a2eba61e5b85",
              "name": "OpenAI Chat Model3",
              "credentials": {
                "openAiApi": {
                  "id": "L3P9Ae81haTD2rYm",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
              "typeVersion": 1,
              "position": [
                752,
                464
              ],
              "id": "4a5872ec-64d4-4012-be87-ed1073f7a57a",
              "name": "OpenRouter Chat Model1",
              "credentials": {
                "openRouterApi": {
                  "id": "TLy9RuRkIKncoUiy",
                  "name": "OpenRouter Freelance account"
                }
              }
            },
            {
              "parameters": {
                "content": "# Model Selector\n",
                "height": 80,
                "width": 288
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                624,
                -128
              ],
              "id": "e6b225fa-7c92-4206-a07e-29d3acad33cf",
              "name": "Sticky Note2"
            }
          ],
          "connections": {
            "When chat message received": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenRouter Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 1
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model1": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model2": {
              "ai_languageModel": [
                [
                  {
                    "node": "Calendar Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Calendar Agent": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Calculator": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory": {
              "ai_memory": [
                [
                  {
                    "node": "AI Agent1",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory1": {
              "ai_memory": [
                [
                  {
                    "node": "Calendar Agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            },
            "create_event": {
              "ai_tool": [
                [
                  {
                    "node": "Calendar Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Model Selector": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent2",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "AI Agent2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model3": {
              "ai_languageModel": [
                [
                  {
                    "node": "Model Selector",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenRouter Chat Model1": {
              "ai_languageModel": [
                [
                  {
                    "node": "Model Selector",
                    "type": "ai_languageModel",
                    "index": 1
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "9e4bcb95-a99a-4a18-87df-b35bc27b6db9",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-02T20:18:22.981Z",
          "updatedAt": "2025-08-09T17:58:27.000Z",
          "id": "76Pqae8BXHF9jEcj",
          "name": "My workflow 2",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "httpMethod": "POST",
                "path": "many-chat",
                "responseMode": "responseNode",
                "options": {}
              },
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2,
              "position": [
                -224,
                0
              ],
              "id": "2de882ac-8926-45ae-8414-227288f48768",
              "name": "Webhook",
              "webhookId": "47fd234b-2b36-4413-ae14-861e0af24361"
            },
            {
              "parameters": {
                "respondWith": "allIncomingItems",
                "options": {}
              },
              "type": "n8n-nodes-base.respondToWebhook",
              "typeVersion": 1.4,
              "position": [
                432,
                0
              ],
              "id": "39fc0a00-8cf1-458f-8e9e-72eb272859d8",
              "name": "Respond to Webhook"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=User Input: {{ $json.body.user_input }}",
                "options": {
                  "systemMessage": "=You are FitBot, the AI assistant for Coach Luv, a certified personal trainer specializing in body transformation for busy professionals in India.\n\n## COACH BACKGROUND:\n8+ years experience in personal training across Mumbai and Delhi\nSpecializes in 12-week transformation programs designed for Indian lifestyle\nFocuses on busy professionals aged 25-45 working in IT, finance, and corporate sectors\nOffers both 1-on-1 coaching (₹8,000/month) and group programs (₹3,500/month)\nExpert in strength training, Indian nutrition planning, and habit formation for busy schedules\nUnderstands challenges of Indian work culture, family commitments, and dietary preferences\n\n## YOUR ROLE:\nYou qualify potential clients, assess their fitness goals, and determine if they're a good fit for Coach Luv's programs. Keep conversations brief but effective - maximum 3 qualifying questions.\n\n## CONVERSATION FLOW:\nIntroduce yourself as Coach Luv's assistant with a warm greeting\nAsk ONLY 3 key qualifying questions (one at a time, wait for response)\nBased on responses, determine qualification\nAsk for email address for consultation booking\nCall the lead_capture tool to add details to Google Sheets\nSend appropriate response with booking link\n\n## QUALIFYING QUESTIONS (Ask only 3, one at a time):\nQuestion 1: \"What's your main fitness goal right now - weight loss, muscle gain, or overall health improvement?\"\nQuestion 2: \"How many days per week can you realistically commit to working out, considering your work and family schedule?\"\nQuestion 3: \"Have you tried any fitness programs before, and are you ready to invest in a structured coaching program?\"\n\n## QUALIFICATION CRITERIA:\n✅ QUALIFIED (offer consultation):\nClear specific goals (lose 10+ kg, gain muscle, improve stamina)\nCan commit 3+ days per week\nReady to invest in coaching (mentions budget willingness or previous program experience)\nFirst time fitness program\n\n❌ NOT QUALIFIED (give free resources):\nVague goals (\"just want to be fit\")\nCan only commit 1-2 days per week\nLooking for completely free solutions\nNot ready to invest or make changes\n\n## TOOLS AVAILABLE:\nlead_capture: Add qualified leads to Google Sheets with email and conversation summary\n\n## RESPONSE TEMPLATES:\n\nFor QUALIFIED leads:\n\"Perfect! You sound like an ideal fit for Coach Luv's program. To schedule your free 20-minute consultation call, I'll need your email address. Coach Luv will personally discuss your goals and create a customized plan for your transformation.\"\n\nFor NOT QUALIFIED leads:\n\"Thanks for sharing! I can see you're interested in fitness. While you might not be ready for a structured program right now, I encourage you to start with some basic fitness habits. When you're ready to commit more time and invest in a structured transformation program, feel free to reach out again! Best of luck with your fitness journey! 🙌\"\n\n## AFTER COLLECTING EMAIL:\n\nFor QUALIFIED leads:\nCall lead_capture tool with: email, \"QUALIFIED\", conversation summary\nSend: \"Excellent! I've added you to Coach Luv's calendar system. Here's your free consultation booking link: https://calendly.com/coachluv/consultation - Choose a time that works for your schedule.\n\nAs a bonus, here's Coach Luv's free transformation guide to get you started: https://coachluv.com/free-guide\nCoach Luv is excited to help you achieve your transformation goals! 💪\"\n\nFor NOT QUALIFIED leads:\nDO NOT ask for email\nOnly send the normal message above\nDO NOT call any tools\nDO NOT send any links\n\n## TONE & PERSONALITY:\nWarm and encouraging, using Indian expressions naturally\nProfessional but friendly\nUnderstanding of Indian work-life challenges\nMotivational without being pushy\nUse appropriate emojis to keep it engaging\n\n## IMPORTANT NOTES:\nKeep responses concise and conversational\nAsk questions one at a time, don't overwhelm\nAlways collect email before sharing any links\nUse the lead_capture tool for EVERY lead (qualified or not)\nRespect budget constraints common in Indian market\nBe understanding of family and work commitments typical in Indian culture"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                0,
                0
              ],
              "id": "efe94d81-bd32-442d-97e8-8ee71506afef",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4.1-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                -64,
                192
              ],
              "id": "fa1be7e8-e293-417f-b224-1317c17d30d6",
              "name": "OpenAI Chat Model",
              "credentials": {
                "openAiApi": {
                  "id": "L3P9Ae81haTD2rYm",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "sessionIdType": "customKey",
                "sessionKey": "={{ $('Webhook').item.json.body.contact_id }}",
                "contextWindowLength": 10
              },
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                96,
                224
              ],
              "id": "68f73598-94df-4e23-9d24-17beb88d7bb3",
              "name": "Simple Memory"
            },
            {
              "parameters": {
                "operation": "append",
                "documentId": {
                  "__rl": true,
                  "value": "1M1XN4sMtqArVajj58Kp3VYygN6DItBQg_uxM6yJ5QtM",
                  "mode": "list",
                  "cachedResultName": "Instagram plus manychat",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1XN4sMtqArVajj58Kp3VYygN6DItBQg_uxM6yJ5QtM/edit?usp=drivesdk"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "Sheet1",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1XN4sMtqArVajj58Kp3VYygN6DItBQg_uxM6yJ5QtM/edit#gid=0"
                },
                "columns": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "Email ID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Email_ID', ``, 'string') }}",
                    "Summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
                  },
                  "matchingColumns": [],
                  "schema": [
                    {
                      "id": "Email ID",
                      "displayName": "Email ID",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "Summary",
                      "displayName": "Summary",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheetsTool",
              "typeVersion": 4.6,
              "position": [
                272,
                208
              ],
              "id": "6618ae40-093b-4d4f-923b-9b26cde8b847",
              "name": "Append row in sheet in Google Sheets",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "Nn6MoNvB7CWuaQp9",
                  "name": "Lakshit Account"
                }
              }
            }
          ],
          "connections": {
            "Webhook": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent": {
              "main": [
                [
                  {
                    "node": "Respond to Webhook",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory": {
              "ai_memory": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            },
            "Append row in sheet in Google Sheets": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "fbf741c8-5ea1-4d2f-9330-e7180bcff580",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-07-13T10:29:03.434Z",
          "updatedAt": "2025-07-20T13:33:34.000Z",
          "id": "EbrJmHvXVDeWJRGR",
          "name": "28_Retell Inbound AI agent",
          "active": false,
          "isArchived": true,
          "nodes": [],
          "connections": {},
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "266d07b0-6433-46a6-bdfe-065096af5e90",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-16T18:37:22.920Z",
          "updatedAt": "2025-08-16T18:37:22.920Z",
          "id": "EjPmdfDXn9tdS2sy",
          "name": "My workflow 4",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {}
                  ]
                }
              },
              "type": "n8n-nodes-base.scheduleTrigger",
              "typeVersion": 1.2,
              "position": [
                -288,
                -16
              ],
              "id": "1be69cea-7365-4a7f-859d-734325377996",
              "name": "Schedule Trigger"
            },
            {
              "parameters": {
                "filters": {},
                "requestOptions": {}
              },
              "type": "n8n-nodes-base.n8n",
              "typeVersion": 1,
              "position": [
                -80,
                -16
              ],
              "id": "f5c13e5b-0aa8-41a1-9b9c-577afb80f0ee",
              "name": "Get many workflows",
              "credentials": {
                "n8nApi": {
                  "id": "qbFCYZ5EUrYwtknS",
                  "name": "n8n account"
                }
              }
            }
          ],
          "connections": {
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "Get many workflows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "48805298-38d7-49a4-b9b7-17a3a4f8e357",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-13T16:03:02.413Z",
          "updatedAt": "2025-08-13T17:52:36.000Z",
          "id": "Fbwm31222Twz7U1e",
          "name": "My workflow 3",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "typeVersion": 1.1,
              "position": [
                -448,
                -176
              ],
              "id": "217ae419-4fda-442a-921f-66aaabd15272",
              "name": "When chat message received",
              "webhookId": "293bb788-6b55-4c0c-8fd8-a5ad423cf648"
            },
            {
              "parameters": {
                "options": {
                  "systemMessage": "=For upto date information use `search_internet` tool call\n\n{{ $now }}"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                -224,
                -176
              ],
              "id": "17e2a3a7-3c03-4348-9284-d768764c4152",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "model": "openai/gpt-oss-120b",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
              "typeVersion": 1,
              "position": [
                -336,
                48
              ],
              "id": "170ab73d-9593-40c3-96c8-5353dcb6ae42",
              "name": "OpenRouter Chat Model",
              "credentials": {
                "openRouterApi": {
                  "id": "A1GvYicRv2zoFijh",
                  "name": "OpenRouter account"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
              "typeVersion": 1,
              "position": [
                16,
                80
              ],
              "id": "8cfb97c6-3ab5-49e3-832a-68b0895fd662",
              "name": "search_internet",
              "credentials": {
                "serpApi": {
                  "id": "PscrgeEmfOeflX4u",
                  "name": "Lakshit SerpAPI Account"
                }
              }
            },
            {
              "parameters": {},
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                -224,
                32
              ],
              "id": "220b868f-3d63-40ae-a217-da716a1b2866",
              "name": "Simple Memory"
            }
          ],
          "connections": {
            "When chat message received": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenRouter Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "search_internet": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory": {
              "ai_memory": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "5164eba3-9114-49c4-8468-2c393ff8dc38",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-07-24T18:28:03.576Z",
          "updatedAt": "2025-08-16T06:28:46.000Z",
          "id": "KLYmEojBIklEv6lE",
          "name": "33_linkedin_comment_using_n8n",
          "active": true,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "httpMethod": "POST",
                "path": "9e3090bf-eafd-4875-b108-c96fee35b95a",
                "responseMode": "responseNode",
                "options": {
                  "rawBody": true
                }
              },
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2,
              "position": [
                -448,
                -144
              ],
              "id": "b109daf4-d9cb-409f-baa8-b6239eeadabc",
              "name": "Webhook",
              "webhookId": "0f61ff50-9a9b-4e96-bc3d-77c20494505c"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Here is a new LinkedIn post to generate a comment for.\n\nPost description:\n\"\"\"\n{{ $json.body.caption }}\n\"\"\"\n\nTone:\n{{ $json.body.tone || \"Professional Tone\"}}  \n\nIf possible, try to include the following feedback question in a natural way:\n{{ $json.body.hint }}(optional)\n\nGenerate a single human-like comment for this post based on the input.\n",
                "hasOutputParser": true,
                "options": {
                  "systemMessage": "=You are a helpful, professional assistant that generates thoughtful, human-like comments for LinkedIn posts. Your goal is to help users engage meaningfully on posts by crafting context-aware, relevant, and personalized comments.\n\nYou have access to a short-term memory of recent comments made by the user. Use this memory to:\n- Avoid repetition\n- Maintain variety in language and tone\n- Reflect consistency in personal or professional voice\n\nEach comment should:\n- Reflect the given tone by user\n- Be directly relevant to the post content\n- Feel natural and written by a human\n- Avoid generic phrases unless used intentionally for tone\n\nKeep the comment concise within 40 words\n"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 1.9,
              "position": [
                -144,
                -192
              ],
              "id": "df424228-9690-4826-8a1d-244e41aa3c4a",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "value": "={{ $json.body.model||\"gpt-4.1-nano\"}}",
                  "mode": "id"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                -336,
                208
              ],
              "id": "41455a36-234d-4362-8dee-66b985f2a23a",
              "name": "OpenAI Chat Model",
              "credentials": {
                "openAiApi": {
                  "id": "L3P9Ae81haTD2rYm",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "schemaType": "manual",
                "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"comment\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
              },
              "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
              "typeVersion": 1.2,
              "position": [
                112,
                208
              ],
              "id": "673df10d-4947-4ac9-b095-b0014d28d348",
              "name": "Structured Output Parser"
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "266ca3fd-ed52-4fa0-a8a6-d439fc11387e",
                      "name": "comment",
                      "value": "={{ $json.output.comment }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                272,
                -192
              ],
              "id": "6fcd4d3d-c9df-4085-9d6a-6ce5b05ed829",
              "name": "Edit Fields"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "n8n-nodes-base.respondToWebhook",
              "typeVersion": 1.1,
              "position": [
                560,
                -192
              ],
              "id": "0f11dffa-4669-4fd9-b7d4-a03d827885ae",
              "name": "Respond to Webhook"
            },
            {
              "parameters": {
                "sessionIdType": "customKey",
                "sessionKey": "={{ $('Webhook').item.json.body.user_info.id }}",
                "contextWindowLength": 3
              },
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                -144,
                256
              ],
              "id": "2833f5ef-2061-4326-82d9-21a7bbab45e3",
              "name": "Simple Memory"
            }
          ],
          "connections": {
            "Webhook": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent": {
              "main": [
                [
                  {
                    "node": "Edit Fields",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Structured Output Parser": {
              "ai_outputParser": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_outputParser",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit Fields": {
              "main": [
                [
                  {
                    "node": "Respond to Webhook",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory": {
              "ai_memory": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "95f444b6-67df-4d1b-9e54-d462498c317b",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-16T14:43:48.041Z",
          "updatedAt": "2025-08-16T14:44:42.000Z",
          "id": "TdXQBGvQgYd4Ox9r",
          "name": "41. Youtube Comment Automation",
          "active": false,
          "isArchived": false,
          "nodes": [],
          "connections": {},
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {},
          "versionId": "9f9fdd17-511b-4afd-b81f-7a591be2e1d0",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-16T09:02:35.719Z",
          "updatedAt": "2025-08-16T18:30:36.000Z",
          "id": "VWPlPrzva4d6UDmP",
          "name": "40.n8n backup workflow",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {},
              "id": "5aa0b8e5-ed06-4df6-bc06-00e52fb250cb",
              "name": "Daily Trigger",
              "type": "n8n-nodes-base.cron",
              "typeVersion": 1,
              "position": [
                -384,
                144
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "400c349a-6694-4ebc-8cc8-4b36b30cdd05",
                      "name": "folderName",
                      "value": "=Backup_{{ $now.format('yyyy-MM-dd') }}",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "18c5bc02-3de1-43fb-b3a8-d40436957ff0",
              "name": "Set Variables",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -160,
                144
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "dc9a5088-149c-448c-8bdd-779e650caf97",
              "name": "Split Workflows",
              "type": "n8n-nodes-base.splitInBatches",
              "typeVersion": 3,
              "position": [
                352,
                144
              ]
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "workflow-content",
                      "name": "nodes",
                      "value": "={{ JSON.stringify($json, null, 2) }}",
                      "type": "string"
                    },
                    {
                      "id": "workflow-filename",
                      "name": "fileName",
                      "value": "={{ $json.name }}.json",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "id": "9324d269-a6fe-4619-8455-f905d677453d",
              "name": "Prepare File Content",
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                672,
                144
              ]
            },
            {
              "parameters": {
                "resource": "file",
                "owner": {
                  "__rl": true,
                  "value": "lakshit77",
                  "mode": "name"
                },
                "repository": {
                  "__rl": true,
                  "value": "n8n-backup",
                  "mode": "list",
                  "cachedResultName": "n8n-backup",
                  "cachedResultUrl": "https://github.com/lakshit77/n8n-backup"
                },
                "filePath": "={{ $('Set Variables').item.json.folderName }}/{{ $('Prepare File Content').item.json.fileName }}",
                "binaryData": true,
                "commitMessage": "={{ $now.setZone('Asia/Kolkata').format('yyyy-MM-dd T') }} Backup completed"
              },
              "id": "ca728eba-1594-4fd0-8ad3-c6db4b3a64cb",
              "name": "Upload to GitHub",
              "type": "n8n-nodes-base.github",
              "typeVersion": 1,
              "position": [
                1120,
                224
              ],
              "webhookId": "20f36eee-6bfe-4264-9490-d76d5c1ef46d",
              "alwaysOutputData": false,
              "notesInFlow": true,
              "credentials": {
                "githubApi": {
                  "id": "z4bTvsI2pravRKl9",
                  "name": "Lakshit GitHub account"
                }
              },
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "resource": "file",
                "owner": {
                  "__rl": true,
                  "value": "=lakshit77",
                  "mode": "name"
                },
                "repository": {
                  "__rl": true,
                  "value": "n8n-backup",
                  "mode": "list",
                  "cachedResultName": "n8n-backup",
                  "cachedResultUrl": "https://github.com/lakshit77/n8n-backup"
                },
                "filePath": "={{ $('Set Variables').item.json.folderName }}/README.md",
                "fileContent": "=# N8N Workflow Backup - {{ $('Set Variables').item.json.folderName }}\n\nThis folder contains the backup of all N8N workflows as of {{ $now.setZone('Asia/Kolkata').format('yyyy-MM-dd') }}\n\n## Backup Details\n- Backup Time: {{ $now.setZone('Asia/Kolkata').format('yyyy-MM-dd T') }}\n- Total Workflows: {{ $('Get many workflows').all().length }}\n\n## Files\nEach workflow is saved as a separate JSON file with the format\n\n---\n*Automatically generated by N8N Backup Workflow*",
                "commitMessage": "=Add README for backup folder"
              },
              "id": "06956ded-b3d2-4d18-a403-678f3d1b15ce",
              "name": "Create README",
              "type": "n8n-nodes-base.github",
              "typeVersion": 1,
              "position": [
                672,
                -112
              ],
              "webhookId": "5f0a2d4b-f990-480e-8bf7-1aea62f5fc7c",
              "credentials": {
                "githubApi": {
                  "id": "z4bTvsI2pravRKl9",
                  "name": "Lakshit GitHub account"
                }
              }
            },
            {
              "parameters": {
                "operation": "toText",
                "sourceProperty": "nodes",
                "options": {
                  "fileName": "={{ $json.fileName }}"
                }
              },
              "type": "n8n-nodes-base.convertToFile",
              "typeVersion": 1.1,
              "position": [
                896,
                144
              ],
              "id": "ace9b3c8-c1d7-4f0c-bf11-ae7bc7999ee1",
              "name": "Convert to File"
            },
            {
              "parameters": {
                "operation": "append",
                "documentId": {
                  "__rl": true,
                  "value": "1gqmegitfHNqya-lEUdaQ16hBVD8okXi2oeGr8V4nWFM",
                  "mode": "list",
                  "cachedResultName": "Daily backup n8n",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gqmegitfHNqya-lEUdaQ16hBVD8okXi2oeGr8V4nWFM/edit?usp=drivesdk"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "Sheet1",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gqmegitfHNqya-lEUdaQ16hBVD8okXi2oeGr8V4nWFM/edit#gid=0"
                },
                "columns": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "File Name": "={{ $('Prepare File Content').item.json.fileName }}",
                    "Error Message": "={{ $json.error }}",
                    "DateTime": "={{$now.setZone('Asia/Kolkata').format('yyyy-MM-dd T')}}",
                    "Folder Name": "={{ $('Set Variables').item.json.folderName }}"
                  },
                  "matchingColumns": [],
                  "schema": [
                    {
                      "id": "DateTime",
                      "displayName": "DateTime",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "Folder Name",
                      "displayName": "Folder Name",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "File Name",
                      "displayName": "File Name",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "Error Message",
                      "displayName": "Error Message",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheets",
              "typeVersion": 4.6,
              "position": [
                1344,
                240
              ],
              "id": "2363071a-754b-42a5-9546-27fb59f766c1",
              "name": "Append row in sheet",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "Nn6MoNvB7CWuaQp9",
                  "name": "Lakshit Account"
                }
              }
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.limit",
              "typeVersion": 1,
              "position": [
                80,
                -224
              ],
              "id": "3d9b4fe4-fb32-4a3f-983c-5c9398059b56",
              "name": "Limit"
            },
            {
              "parameters": {
                "filters": {},
                "requestOptions": {}
              },
              "type": "n8n-nodes-base.n8n",
              "typeVersion": 1,
              "position": [
                48,
                144
              ],
              "id": "5297a3ae-5785-4c29-83dd-57c38b6697e0",
              "name": "Get many workflows",
              "credentials": {
                "n8nApi": {
                  "id": "z38UGfyhYW1FuBfC",
                  "name": "Hostinger n8n account"
                }
              }
            }
          ],
          "connections": {
            "Daily Trigger": {
              "main": [
                [
                  {
                    "node": "Set Variables",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Set Variables": {
              "main": [
                [
                  {
                    "node": "Get many workflows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Split Workflows": {
              "main": [
                [
                  {
                    "node": "Create README",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Prepare File Content",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Prepare File Content": {
              "main": [
                [
                  {
                    "node": "Convert to File",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Upload to GitHub": {
              "main": [
                [
                  {
                    "node": "Split Workflows",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Append row in sheet",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create README": {
              "main": [
                []
              ]
            },
            "Convert to File": {
              "main": [
                [
                  {
                    "node": "Upload to GitHub",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Limit": {
              "main": [
                []
              ]
            },
            "Append row in sheet": {
              "main": [
                [
                  {
                    "node": "Split Workflows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get many workflows": {
              "main": [
                [
                  {
                    "node": "Split Workflows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "18fe8827-dd8b-4352-ab45-3ac3c61fdf9d",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-07-20T13:33:45.163Z",
          "updatedAt": "2025-08-06T04:38:33.000Z",
          "id": "XM256mcmft23vPSb",
          "name": "31_Linkedin_all_post_type",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "2caebe7c-a2d3-428e-b129-fcfbe66854e5",
                      "name": "post_type",
                      "value": "video",
                      "type": "string"
                    },
                    {
                      "id": "c4578992-d24a-4666-b369-ae9f8c91aaec",
                      "name": "node_type",
                      "value": "linkedin",
                      "type": "string"
                    },
                    {
                      "id": "a17a5c94-d9ae-44f8-9d56-fb55d17efe5a",
                      "name": "image_url",
                      "value": "https://media.licdn.com/dms/image/v2/D4D03AQHf-K7ergkUwQ/profile-displayphoto-shrink_800_800/B4DZbdtDouHQAg-/0/1747476298728?e=1753920000&v=beta&t=Js1KDjpDYOgzYW4YlhwT1_ZmbggoSIxjcq3IA0rRJs0",
                      "type": "string"
                    },
                    {
                      "id": "32aa1561-458c-4f64-a854-eab65f9ad1dd",
                      "name": "video_url",
                      "value": "https://videos.pexels.com/video-files/4434242/4434242-sd_360_640_24fps.mp4",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -336,
                32
              ],
              "id": "0abe8bb1-e800-4cf2-a824-a136fa45ee08",
              "name": "Configure Post Settings"
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "text",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "ab388a77-1660-4a64-ba58-bc405444dbd5"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Text"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "be8816f5-ae68-48c3-869e-bc67078298d8",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "article",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Article"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "abb2fd36-d2c5-479d-bb6e-e201a6d20d05",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "article_image",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Article Image"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "663bacc8-ceeb-4f81-b058-c379eaf6e717",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "image",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Image"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "99441a51-906e-469a-b98e-64aa43c996ba",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "video",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Video"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                160,
                -48
              ],
              "id": "73d7de3d-ab3f-4aaf-8c3c-1313f9727574",
              "name": "Smart Content Router"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.linkedin.com/v2/ugcPosts",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"author\": \"urn:li:person:{{ $json.sub }}\",\n    \"lifecycleState\": \"PUBLISHED\",\n    \"specificContent\": {\n        \"com.linkedin.ugc.ShareContent\": {\n            \"shareCommentary\": {\n                \"text\": \"This is my automate API Post\"\n            },\n            \"shareMediaCategory\": \"NONE\"   \n        }\n    },\n    \"visibility\": {\n        \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n    }\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1264,
                -656
              ],
              "id": "552826ed-3b9c-49ca-a0ba-29ba00f18253",
              "name": "Text Post",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.linkedin.com/v2/ugcPosts",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"author\": \"urn:li:person:{{ $json.sub }}\",\n    \"lifecycleState\": \"PUBLISHED\",\n    \"specificContent\": {\n        \"com.linkedin.ugc.ShareContent\": {\n            \"shareCommentary\": {\n                \"text\": \"Learning more about LinkedIn by reading the LinkedIn Blog!\"\n            },\n            \"shareMediaCategory\": \"ARTICLE\",\n            \"media\": [\n                {\n                    \"status\": \"READY\",\n                    \"description\": {\n                        \"text\": \"Now you can Automate All Instagram Post\"\n                    },\n                    \"originalUrl\": \"https://youtu.be/t63IlcH1GJY?si=V94VitNWyNNvk7WR\",\n                    \"title\": {\n                        \"text\": \"Automate All Instagram Post\"\n                    }\n                }\n            ]\n        }\n    },\n    \"visibility\": {\n        \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n    }\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1248,
                -320
              ],
              "id": "bc341da3-341a-453f-8be6-3c51c78b77dc",
              "name": "Article Post",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.linkedin.com/v2/ugcPosts",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"author\": \"urn:li:person:{{ $json.sub }}\",\n    \"lifecycleState\": \"PUBLISHED\",\n    \"specificContent\": {\n        \"com.linkedin.ugc.ShareContent\": {\n            \"shareCommentary\": {\n                \"text\": \"Let's Automate All Instagram Post Type\"\n            },\n            \"shareMediaCategory\": \"ARTICLE\",\n            \"media\": [\n                {\n                    \"status\": \"READY\",\n                    \"description\": {\n                        \"text\": \"Now you can Automate All Instagram Post\"\n                    },\n                    \"originalUrl\": \"https://youtu.be/t63IlcH1GJY?si=V94VitNWyNNvk7WR\",\n                    \"title\": {\n                        \"text\": \"Automate All Instagram Post\"\n                    },\n                    \"thumbnails\": [{\n                        \"url\": \"https://i.ytimg.com/vi/t63IlcH1GJY/hq720.jpg\"\n                    }]\n                }\n            ]\n        }\n    },\n    \"visibility\": {\n        \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n    }\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1184,
                112
              ],
              "id": "bf541709-422b-471f-9c59-aabf8c6faae3",
              "name": "Article with Image",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.linkedin.com/v2/assets?action=registerUpload",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"registerUploadRequest\": {\n        \"recipes\": [\n            \"urn:li:digitalmediaRecipe:feedshare-image\"\n        ],\n        \"owner\": \"urn:li:person:{{ $json.sub }}\",\n        \"serviceRelationships\": [\n            {\n                \"relationshipType\": \"OWNER\",\n                \"identifier\": \"urn:li:userGeneratedContent\"\n            }\n        ]\n    }\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1040,
                352
              ],
              "id": "d93c879d-256b-4565-b159-f438bc693001",
              "name": "Register Image Upload",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.linkedin.com/v2/assets?action=registerUpload",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"registerUploadRequest\": {\n        \"recipes\": [\n            \"urn:li:digitalmediaRecipe:feedshare-video\"\n        ],\n        \"owner\": \"urn:li:person:{{ $json.sub }}\",\n        \"serviceRelationships\": [\n            {\n                \"relationshipType\": \"OWNER\",\n                \"identifier\": \"urn:li:userGeneratedContent\"\n            }\n        ]\n    }\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                960,
                768
              ],
              "id": "135908a0-9b83-4d38-bf18-af3614a9529a",
              "name": "Register Video Upload",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "={{ $json.value.uploadMechanism['com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest'].uploadUrl }}",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "contentType": "binaryData",
                "inputDataFieldName": "data",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1424,
                352
              ],
              "id": "38be6c46-f4e5-48ac-9268-f467d3bd34b5",
              "name": "Upload Image File",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.linkedin.com/v2/ugcPosts",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"author\": \"urn:li:person:{{ $('Get UserID5').item.json.sub }}\",\n    \"lifecycleState\": \"PUBLISHED\",\n    \"specificContent\": {\n        \"com.linkedin.ugc.ShareContent\": {\n            \"shareCommentary\": {\n                \"text\": \"Now this is how we automate the image posting\"\n            },\n            \"shareMediaCategory\": \"IMAGE\",\n            \"media\": [\n                {\n                    \"status\": \"READY\",\n                    \"description\": {\n                        \"text\": \"Center stage!\"\n                    },\n                    \"media\": \"{{ $('Register Image Upload').item.json.value.asset }}\",\n                    \"title\": {\n                        \"text\": \"I don't know where this text come\"\n                    }\n                }\n            ]\n        }\n    },\n    \"visibility\": {\n        \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n    }\n}",
                "options": {
                  "redirect": {
                    "redirect": {}
                  }
                }
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1632,
                352
              ],
              "id": "a37d459f-c51f-4204-af25-efa29aeed0d0",
              "name": "Linkedin Image Post",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "url": "={{ $('Configure Post Settings').item.json.video_url }}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1200,
                768
              ],
              "id": "917afbde-a59e-4127-9f34-28b3a2dc8b36",
              "name": "Download Video"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "={{ $json.value.uploadMechanism['com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest'].uploadUrl }}",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "contentType": "binaryData",
                "inputDataFieldName": "data",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1408,
                768
              ],
              "id": "b8ba4251-f58c-4bab-b2b9-e7a42116e5ce",
              "name": "Upload Video File",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.linkedin.com/v2/ugcPosts",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n    \"author\": \"urn:li:person:{{ $('Get UserID6').item.json.sub }}\",\n    \"lifecycleState\": \"PUBLISHED\",\n    \"specificContent\": {\n        \"com.linkedin.ugc.ShareContent\": {\n            \"shareCommentary\": {\n                \"text\": \"Now this is how we automate the Video posting\"\n            },\n            \"shareMediaCategory\": \"VIDEO\",\n            \"media\": [\n                {\n                    \"status\": \"READY\",\n                    \"description\": {\n                        \"text\": \"Center stage!\"\n                    },\n                    \"media\": \"{{ $('Register Video Upload').item.json.value.asset }}\",\n                    \"title\": {\n                        \"text\": \"I don't know where this text come\"\n                    }\n                }\n            ]\n        }\n    },\n    \"visibility\": {\n        \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n    }\n}",
                "options": {
                  "redirect": {
                    "redirect": {}
                  }
                }
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1632,
                768
              ],
              "id": "7af5c8bc-9e79-4658-ada8-d9e8219b2873",
              "name": "Linkedin Video Post",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "content": "## 🚀 LinkedIn Multi-Format Post Automation\n**Automate ALL LinkedIn post types with one workflow!**\n\n✅ **Supported Post Types:**\n- 📝 Text-only posts\n- 📰 Article sharing  \n- 🖼️ Article with custom thumbnail\n- 📸 Single image posts\n- 🎥 Video posts\n\n🎯 **Perfect for:** Content creators, marketers, social media managers\n⚡ **One-click posting** to LinkedIn with professional formatting",
                "height": 320,
                "width": 560,
                "color": 7
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -336,
                432
              ],
              "id": "5acb248d-4dd7-47c2-a469-6fe88f9db2c2",
              "name": "Sticky Note"
            },
            {
              "parameters": {
                "content": "## ⚙️ Post Configuration Center\n**Customize your content here before posting**\n\n📋 **Required Settings:**\n- `post_type` → Choose: text, article, article_image, image, video\n- `image_url` → Direct link to image file  \n- `video_url` → Direct link to video file\n\n🔧 **Quick Setup:** Just modify the \"Configure Post Settings\" node values",
                "height": 620,
                "width": 640,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -736,
                -304
              ],
              "id": "aa0322cb-b312-46e7-84bb-2d8f661eea68",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "content": "## 🧠 Intelligent Content Router\n**Automatically detects post type and routes to correct processing**\n",
                "height": 620,
                "width": 360,
                "color": 6
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                48,
                -304
              ],
              "id": "17331bfb-1ff8-4ce1-8c29-dffdfa2c9817",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "content": "## 📸 Image Posting",
                "height": 360,
                "width": 1240
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                608,
                288
              ],
              "id": "f47fb4b3-0fb9-4ff0-ac94-62cc81d16af8",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "content": "## 🎬 Video Posting",
                "height": 300,
                "width": 1240
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                608,
                688
              ],
              "id": "87252019-29f7-4365-bca8-d055e2b4fc2e",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "url": "={{ $('Configure Post Settings').item.json.image_url }}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1248,
                352
              ],
              "id": "6e476dd9-ec02-40c2-b69a-7641735cea84",
              "name": "Download Image"
            },
            {
              "parameters": {
                "content": "## 📸 Article with Thumbnail Posting",
                "height": 220,
                "width": 1000
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                608,
                48
              ],
              "id": "1e3d5e64-56ca-4b6c-9c2d-9da54a641b63",
              "name": "Sticky Note6"
            },
            {
              "parameters": {
                "content": "## 📸 Article Posting",
                "height": 340,
                "width": 1000
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                608,
                -336
              ],
              "id": "296fdd24-2a99-42e1-a74e-78eed3e92202",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "content": "## 📸 Text Posting",
                "height": 320,
                "width": 1000
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                608,
                -688
              ],
              "id": "deee71f3-f15c-4886-bc97-e2117bac0840",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "person": "QyGjon0PYg",
                "text": "Automated post",
                "additionalFields": {}
              },
              "type": "n8n-nodes-base.linkedIn",
              "typeVersion": 1,
              "position": [
                1168,
                -496
              ],
              "id": "76ce31ad-302b-4af0-bf82-5fab282e47d1",
              "name": "Text Post Linkedin",
              "credentials": {
                "linkedInOAuth2Api": {
                  "id": "FEWWEKeYGJip3nLT",
                  "name": "LinkedIn n8n test"
                }
              }
            },
            {
              "parameters": {
                "person": "QyGjon0PYg",
                "text": "Automated post",
                "shareMediaCategory": "ARTICLE",
                "additionalFields": {
                  "description": "Now you can Automate All Instagram Post",
                  "originalUrl": "https://youtu.be/t63IlcH1GJY?si=V94VitNWyNNvk7WR",
                  "title": "Automate All Instagram Post"
                }
              },
              "type": "n8n-nodes-base.linkedIn",
              "typeVersion": 1,
              "position": [
                1184,
                -160
              ],
              "id": "6cf97b1b-e93f-419e-ab00-2e565a79a463",
              "name": "Text Post Linkedin1",
              "credentials": {
                "linkedInOAuth2Api": {
                  "id": "FEWWEKeYGJip3nLT",
                  "name": "LinkedIn n8n test"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                768,
                -576
              ],
              "id": "4cb96dcf-610f-4cfc-9793-b14b62fa230a",
              "name": "Text If"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                768,
                -256
              ],
              "id": "9e84333a-0f97-4928-99d7-ff22112bfd7a",
              "name": "Article if"
            },
            {
              "parameters": {
                "person": "QyGjon0PYg",
                "text": "Automated post",
                "shareMediaCategory": "IMAGE",
                "additionalFields": {
                  "title": "Automate All Instagram Post"
                }
              },
              "type": "n8n-nodes-base.linkedIn",
              "typeVersion": 1,
              "position": [
                1248,
                512
              ],
              "id": "fe1a48f6-eb9a-4b3b-83ef-ae3d55271068",
              "name": "Image Post Linkedin",
              "credentials": {
                "linkedInOAuth2Api": {
                  "id": "FEWWEKeYGJip3nLT",
                  "name": "LinkedIn n8n test"
                }
              }
            },
            {
              "parameters": {
                "url": "={{ $('Configure Post Settings').item.json.image_url }}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                992,
                512
              ],
              "id": "ab249768-e1dc-4273-99ff-0ee602e8ebff",
              "name": "Download Imagee"
            },
            {
              "parameters": {
                "url": "https://api.linkedin.com/v2/userinfo",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1040,
                -656
              ],
              "id": "2ea5c734-8498-4535-84c6-e1456122650b",
              "name": "Get UserID2",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "url": "https://api.linkedin.com/v2/userinfo",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                1040,
                -320
              ],
              "id": "5bacf2ab-36e9-4d1d-ba28-42e50648c9c5",
              "name": "Get UserID3",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "url": "https://api.linkedin.com/v2/userinfo",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                880,
                112
              ],
              "id": "9e902b23-c09e-4664-8f7e-ea9cb7371be3",
              "name": "Get UserID4",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "url": "https://api.linkedin.com/v2/userinfo",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                848,
                352
              ],
              "id": "98f16750-1edf-4898-bd6a-55bd3be7494a",
              "name": "Get UserID5",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {
                "url": "https://api.linkedin.com/v2/userinfo",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                720,
                768
              ],
              "id": "871ee6f3-7968-4612-a13b-89774817287a",
              "name": "Get UserID6",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "XY6pQwz6WFvJdONu",
                  "name": "Linkedin Access Token"
                }
              }
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -640,
                0
              ],
              "id": "c8aaa3e6-b2f6-4312-9676-0b4fce2f6a77",
              "name": "When clicking ‘Execute workflow’"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                672,
                400
              ],
              "id": "e43dd5dc-8ee0-4ff7-90f6-05feae0d4785",
              "name": "Image if"
            }
          ],
          "connections": {
            "Configure Post Settings": {
              "main": [
                [
                  {
                    "node": "Smart Content Router",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Smart Content Router": {
              "main": [
                [
                  {
                    "node": "Text If",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Article if",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Get UserID4",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Image if",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Get UserID6",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Register Image Upload": {
              "main": [
                [
                  {
                    "node": "Download Image",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Upload Image File": {
              "main": [
                [
                  {
                    "node": "Linkedin Image Post",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Register Video Upload": {
              "main": [
                [
                  {
                    "node": "Download Video",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Download Video": {
              "main": [
                [
                  {
                    "node": "Upload Video File",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Upload Video File": {
              "main": [
                [
                  {
                    "node": "Linkedin Video Post",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Download Image": {
              "main": [
                [
                  {
                    "node": "Upload Image File",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Text If": {
              "main": [
                [
                  {
                    "node": "Get UserID2",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Text Post Linkedin",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Article if": {
              "main": [
                [
                  {
                    "node": "Get UserID3",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Text Post Linkedin1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Download Imagee": {
              "main": [
                [
                  {
                    "node": "Image Post Linkedin",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get UserID2": {
              "main": [
                [
                  {
                    "node": "Text Post",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get UserID3": {
              "main": [
                [
                  {
                    "node": "Article Post",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get UserID4": {
              "main": [
                [
                  {
                    "node": "Article with Image",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get UserID5": {
              "main": [
                [
                  {
                    "node": "Register Image Upload",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get UserID6": {
              "main": [
                [
                  {
                    "node": "Register Video Upload",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "Configure Post Settings",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Image if": {
              "main": [
                [
                  {
                    "node": "Get UserID5",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Download Imagee",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "a55a5a4a-ee83-4984-8f98-b0738085ed4f",
          "triggerCount": 0,
          "tags": [
            {
              "createdAt": "2025-07-20T13:33:47.869Z",
              "updatedAt": "2025-07-20T13:33:47.869Z",
              "id": "L1ttDatV4HxNps28",
              "name": "youtube"
            }
          ]
        }
      },
      {
        "json": {
          "createdAt": "2025-07-23T18:13:44.743Z",
          "updatedAt": "2025-07-27T12:37:44.000Z",
          "id": "YWt815cC6xApiPq2",
          "name": "32_facebook_post_with_n8n",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "2caebe7c-a2d3-428e-b129-fcfbe66854e5",
                      "name": "post_type",
                      "value": "reel",
                      "type": "string"
                    },
                    {
                      "id": "f5027281-f5b9-4507-95f3-f1d8749e9028",
                      "name": "page_id",
                      "value": "107998267271891",
                      "type": "string"
                    },
                    {
                      "id": "c4578992-d24a-4666-b369-ae9f8c91aaec",
                      "name": "node_type",
                      "value": "http",
                      "type": "string"
                    },
                    {
                      "id": "a17a5c94-d9ae-44f8-9d56-fb55d17efe5a",
                      "name": "image_url",
                      "value": "https://media.licdn.com/dms/image/v2/D4D03AQHf-K7ergkUwQ/profile-displayphoto-shrink_800_800/B4DZbdtDouHQAg-/0/1747476298728?e=1753920000&v=beta&t=Js1KDjpDYOgzYW4YlhwT1_ZmbggoSIxjcq3IA0rRJs0",
                      "type": "string"
                    },
                    {
                      "id": "32aa1561-458c-4f64-a854-eab65f9ad1dd",
                      "name": "video_url",
                      "value": "https://videos.pexels.com/video-files/4434242/4434242-sd_360_640_24fps.mp4",
                      "type": "string"
                    },
                    {
                      "id": "383ffb11-0191-4fbc-abb1-c9183c66c71c",
                      "name": "reel_url",
                      "value": "https://videos.pexels.com/video-files/4830364/4830364-uhd_1440_2732_25fps.mp4",
                      "type": "string"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.set",
              "typeVersion": 3.4,
              "position": [
                -2240,
                -500
              ],
              "id": "b2e0f40b-a102-4f2a-8f4b-69a214a52429",
              "name": "Configure Post Settings"
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "text",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "ab388a77-1660-4a64-ba58-bc405444dbd5"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Text"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "663bacc8-ceeb-4f81-b058-c379eaf6e717",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "image",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Image"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "99441a51-906e-469a-b98e-64aa43c996ba",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "video",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Video"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "abb2fd36-d2c5-479d-bb6e-e201a6d20d05",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "carousel",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Carousel"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "be8816f5-ae68-48c3-869e-bc67078298d8",
                            "leftValue": "={{ $('Configure Post Settings').item.json.post_type }}",
                            "rightValue": "reel",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Reel"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                -1760,
                -540
              ],
              "id": "d799172f-f7fa-48ff-8727-1ea0b2afdf4f",
              "name": "Smart Content Router"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $json.page_id }}/feed",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"message\":\"Automated Post via n8n\",\n   \"link\":\"https://youtu.be/lCX1Skd_Q4M?si=Klq0tka7HMcM0hSB\"\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -960,
                -1160
              ],
              "id": "78435e63-34e1-41b8-8774-a495dcf30bf1",
              "name": "Text Post",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "vkuOafev0hs7EejS",
                  "name": "Facebook Account 2"
                }
              }
            },
            {
              "parameters": {
                "content": "## ⚙️ Post Configuration Center\n**Customize your content here before posting**\n\n📋 **Required Settings:**\n- `post_type` → Choose: text, article, article_image, image, video\n- `image_url` → Direct link to image file  \n- `video_url` → Direct link to video file\n\n🔧 **Quick Setup:** Just modify the \"Configure Post Settings\" node values",
                "height": 620,
                "width": 640,
                "color": 3
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -2660,
                -800
              ],
              "id": "36b2e300-ce3e-4aba-aae5-67d8399a3b08",
              "name": "Sticky Note1"
            },
            {
              "parameters": {
                "content": "## 🧠 Intelligent Content Router\n**Automatically detects post type and routes to correct processing**\n",
                "height": 620,
                "width": 360,
                "color": 6
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -1880,
                -800
              ],
              "id": "f1c5b484-6cb8-4b50-9271-69f8c8ae1f6f",
              "name": "Sticky Note2"
            },
            {
              "parameters": {
                "content": "## 📸 Image Posting",
                "height": 360,
                "width": 700
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -1320,
                -800
              ],
              "id": "201cfc9e-1927-4389-958a-eeba73e3d808",
              "name": "Sticky Note4"
            },
            {
              "parameters": {
                "content": "## 📸 Reel Posting",
                "height": 240,
                "width": 1020
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -1300,
                300
              ],
              "id": "4bb497ba-7217-4220-8c1e-817556a79cae",
              "name": "Sticky Note7"
            },
            {
              "parameters": {
                "content": "## 📸 Text Posting",
                "height": 320,
                "width": 700
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -1320,
                -1180
              ],
              "id": "ace75b90-b88f-4d0c-8675-2c36acb8257c",
              "name": "Sticky Note8"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1260,
                -1080
              ],
              "id": "128b3bfc-8785-49ed-b179-e52b3d17f4a3",
              "name": "Text If"
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -2560,
                -500
              ],
              "id": "980ff463-7a03-43ac-b874-1f11a6693d7e",
              "name": "When clicking ‘Execute workflow’"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1260,
                -680
              ],
              "id": "f27a310d-e773-4af8-9620-aa3b0694747c",
              "name": "Image if"
            },
            {
              "parameters": {
                "httpRequestMethod": "POST",
                "graphApiVersion": "v22.0",
                "node": "me",
                "edge": "feed",
                "options": {
                  "queryParameters": {
                    "parameter": [
                      {
                        "name": "message",
                        "value": "Automated Post via n8n"
                      },
                      {
                        "name": "link",
                        "value": "https://youtu.be/lCX1Skd_Q4M?si=Klq0tka7HMcM0hSB"
                      }
                    ]
                  }
                }
              },
              "type": "n8n-nodes-base.facebookGraphApi",
              "typeVersion": 1,
              "position": [
                -960,
                -1000
              ],
              "id": "d503a495-ec82-44ea-8faa-bf3e8e48c5e7",
              "name": "Facebook Text Post",
              "credentials": {
                "facebookGraphApi": {
                  "id": "DJ3CYWtb5WydRoe9",
                  "name": "Facebook Graph account"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $json.page_id }}/photos",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"url\":\"{{ $json.image_url }}\",\n   \"message\": \"automate post with link https://youtu.be/lCX1Skd_Q4M?si=VXZYWlgjCVtdTK34\"\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -1020,
                -760
              ],
              "id": "26e39507-7bd8-47de-a152-5629b7a3c070",
              "name": "Post Image",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "vkuOafev0hs7EejS",
                  "name": "Facebook Account 2"
                }
              }
            },
            {
              "parameters": {
                "httpRequestMethod": "POST",
                "graphApiVersion": "v22.0",
                "node": "me",
                "edge": "photos",
                "options": {
                  "queryParameters": {
                    "parameter": [
                      {
                        "name": "message",
                        "value": "Automated Post via n8n"
                      },
                      {
                        "name": "url",
                        "value": "={{ $json.image_url }}"
                      }
                    ]
                  }
                }
              },
              "type": "n8n-nodes-base.facebookGraphApi",
              "typeVersion": 1,
              "position": [
                -1020,
                -600
              ],
              "id": "1f8e93b8-e55b-4af0-9096-223de9874ac0",
              "name": "Facebook Image Post",
              "credentials": {
                "facebookGraphApi": {
                  "id": "DJ3CYWtb5WydRoe9",
                  "name": "Facebook Graph account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1240,
                380
              ],
              "id": "971705a0-5025-4c92-924d-d5777211fc37",
              "name": "Reel if"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $json.page_id }}/video_reels",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"upload_phase\":\"start\"\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -1000,
                320
              ],
              "id": "0c908d3f-6981-4762-8cea-8f9a5dd269fe",
              "name": "Initialize Upload Session",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "={{ $json.upload_url }}",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendHeaders": true,
                "headerParameters": {
                  "parameters": [
                    {
                      "name": "file_url",
                      "value": "={{ $('Configure Post Settings').item.json.reel_url }}"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -820,
                320
              ],
              "id": "091c55bf-66ef-41c5-868c-e8c4747724fc",
              "name": "Upload the Reel",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            },
            {
              "parameters": {
                "url": "=https://graph.facebook.com/v23.0/{{ $('Initialize Upload Session').item.json.video_id }}",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendQuery": true,
                "queryParameters": {
                  "parameters": [
                    {
                      "name": "fields",
                      "value": "status"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -640,
                320
              ],
              "id": "2be63123-d2e1-4ef7-90b3-a532d087aaa3",
              "name": "Check Status of Upload",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $('Configure Post Settings').item.json.page_id }}/video_reels",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"video_id\":\"{{ $('Initialize Upload Session').item.json.video_id }}\",\n   \"upload_phase\": \"finish\",\n   \"video_state\": \"PUBLISHED\",\n   \"description\": \"This is automated post via n8n\"\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -460,
                320
              ],
              "id": "3d7b3d33-daed-4f8d-ab8c-01b039f0bcbf",
              "name": "Publish Reel",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            },
            {
              "parameters": {
                "content": "## 📸 Video Posting",
                "height": 340,
                "width": 680
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -1300,
                -380
              ],
              "id": "e4e84273-a9f7-45af-bbc4-891ceb40ef72",
              "name": "Sticky Note9"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1240,
                -300
              ],
              "id": "dae8c135-c5aa-4a55-b4bf-b862b6e82b8b",
              "name": "Video if"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $json.page_id }}/videos",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"file_url\":\"{{ $json.video_url }}\",\n   \"description\": \"automate post with link https://youtu.be/lCX1Skd_Q4M?si=VXZYWlgjCVtdTK34\"\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -1000,
                -360
              ],
              "id": "c7108e10-f300-427c-93c8-72bb2d3b348f",
              "name": "Video Upload",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            },
            {
              "parameters": {
                "httpRequestMethod": "POST",
                "graphApiVersion": "v22.0",
                "node": "me",
                "edge": "videos",
                "options": {
                  "queryParameters": {
                    "parameter": [
                      {
                        "name": "description",
                        "value": "Automated Post via n8n"
                      },
                      {
                        "name": "file_url",
                        "value": "={{ $json.video_url }}"
                      }
                    ]
                  }
                }
              },
              "type": "n8n-nodes-base.facebookGraphApi",
              "typeVersion": 1,
              "position": [
                -1000,
                -180
              ],
              "id": "c066fdfb-8971-41d8-bef4-8880da322fa4",
              "name": "Facebook Video Post",
              "credentials": {
                "facebookGraphApi": {
                  "id": "DJ3CYWtb5WydRoe9",
                  "name": "Facebook Graph account"
                }
              }
            },
            {
              "parameters": {
                "content": "## 📸 Carousel Posting",
                "height": 280,
                "width": 1020
              },
              "type": "n8n-nodes-base.stickyNote",
              "typeVersion": 1,
              "position": [
                -1300,
                -20
              ],
              "id": "d2284d86-6332-4e77-b4c3-28ec9f985679",
              "name": "Sticky Note5"
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "465dee68-878c-46de-8dd8-ba29e8bb93d3",
                      "leftValue": "={{ $('Configure Post Settings').item.json.node_type }}",
                      "rightValue": "http",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -1240,
                60
              ],
              "id": "aa125a94-9ffe-4372-a741-ade6c7fa2144",
              "name": "Carousel"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $json.page_id }}/photos",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"url\":\"{{ $json.image_url }}\",\n   \"published\": false\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -1000,
                40
              ],
              "id": "121aaecf-c287-4590-b902-f464504eb1ab",
              "name": "Post Image 1",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $('Configure Post Settings').item.json.page_id }}/feed",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"message\": \"automate post with link https://youtu.be/lCX1Skd_Q4M?si=VXZYWlgjCVtdTK34\",\n   \"attached_media\": [\n      {\"media_fbid\": {{ $('Post Image 1').item.json.id }}},\n      {\"media_fbid\": {{ $('Post Image 2').item.json.id }}}\n   ]\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -640,
                40
              ],
              "id": "d08de963-f1a5-4b4a-a439-0cade11fdfa6",
              "name": "Publish content",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://graph.facebook.com/v23.0/{{ $('Configure Post Settings').item.json.page_id }}/photos",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpHeaderAuth",
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n   \"url\":\"{{ $('Configure Post Settings').item.json.image_url }}\",\n   \"published\": false\n}",
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -840,
                40
              ],
              "id": "4c4a1779-6d32-4269-b021-e0f3ba7ccabb",
              "name": "Post Image 2",
              "credentials": {
                "httpHeaderAuth": {
                  "id": "BRVJ3ptV3kjXHJIk",
                  "name": "Facebook Access Token"
                }
              }
            }
          ],
          "connections": {
            "Configure Post Settings": {
              "main": [
                [
                  {
                    "node": "Smart Content Router",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Smart Content Router": {
              "main": [
                [
                  {
                    "node": "Text If",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Image if",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Video if",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Carousel",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Reel if",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Text If": {
              "main": [
                [
                  {
                    "node": "Text Post",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Facebook Text Post",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "Configure Post Settings",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Image if": {
              "main": [
                [
                  {
                    "node": "Post Image",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Facebook Image Post",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Post Image": {
              "main": [
                []
              ]
            },
            "Reel if": {
              "main": [
                [
                  {
                    "node": "Initialize Upload Session",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Initialize Upload Session": {
              "main": [
                [
                  {
                    "node": "Upload the Reel",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Upload the Reel": {
              "main": [
                [
                  {
                    "node": "Check Status of Upload",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Check Status of Upload": {
              "main": [
                [
                  {
                    "node": "Publish Reel",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Video if": {
              "main": [
                [
                  {
                    "node": "Video Upload",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Facebook Video Post",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Video Upload": {
              "main": [
                []
              ]
            },
            "Carousel": {
              "main": [
                [
                  {
                    "node": "Post Image 1",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "Post Image 1": {
              "main": [
                [
                  {
                    "node": "Post Image 2",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Publish content": {
              "main": [
                []
              ]
            },
            "Post Image 2": {
              "main": [
                [
                  {
                    "node": "Publish content",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "da34b4ba-a84f-4f52-b3f3-c997c4b332b7",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-07-27T12:43:29.387Z",
          "updatedAt": "2025-08-10T04:27:48.000Z",
          "id": "dUcbE5HByRdvXVWr",
          "name": "n8n tool automation",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 🚨 Ensure this node does not set the input schema!\nFor passthrough parameters to work, this node should not make available input schema fields. ie. the input fields should not be visible.\n\nIf there are, the node needs to be reset!",
                "height": 440
              },
              "id": "9e138371-57eb-454b-a7b6-4d8d583c6c50",
              "name": "Sticky Note7",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                544,
                1200
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "### How many existing workflows can I use?\nWell, as many as you want really! For this example, I've limited it for workflows which are tagged as \"mcp\" but you can remove this filter to allow all.",
                "height": 120,
                "width": 380,
                "color": 5
              },
              "id": "0f494874-1311-4f85-9ea4-273020cf1727",
              "name": "Sticky Note6",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -336,
                -80
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "* **AddWorkflow**\n  This tool adds (or rather, appends) workflows to our \"available\" list.\n* **RemoveWorkflow**\n  This tool removes a workflow entry from our list.\n* **listWorkflows**\n  This tool displays the current state of the workflows list and the available workflows within it. Useful for checking which workflows have been added to the list.\n* **searchWorkflows**\n  For now, this tools just pulls the existing workflows from the n8n instance and returns it to the agent. Given more resources, you may want to swap this out for a indexed search instead (you'll need to build this yourself!).",
                "height": 400,
                "width": 320,
                "color": 5
              },
              "id": "8479f323-71c8-4690-b008-55cd91795eaf",
              "name": "Sticky Note4",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -624,
                1024
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## 4. Connect any Agent with a MCP Client\nUse this agent to test your MCP server. Note, i",
                "height": 560,
                "width": 740,
                "color": 7
              },
              "id": "f4b20bda-c5dc-43fa-97c8-bbd47b5a9714",
              "name": "Sticky Note3",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -1664,
                1072
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "operation": "delete",
                "key": "mcp_n8n_tools"
              },
              "id": "9eba4aef-89e3-4907-bdde-dcc1fd2d8e6d",
              "name": "Delete Key",
              "type": "n8n-nodes-base.redis",
              "position": [
                752,
                512
              ],
              "executeOnce": true,
              "typeVersion": 1,
              "credentials": {
                "redis": {
                  "id": "9A9jRCLFUCHOPuJK",
                  "name": "Redis account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "2cd1b233-fb24-45d5-9efd-1db44b817809",
                      "operator": {
                        "type": "array",
                        "operation": "empty",
                        "singleValue": true
                      },
                      "leftValue": "={{ $input.all().flatMap(item => item.json.data).compact() }}",
                      "rightValue": ""
                    }
                  ]
                },
                "options": {}
              },
              "id": "69db3b21-38e1-4c9d-a9ac-bbca13d9fe50",
              "name": "Is Empty Array?",
              "type": "n8n-nodes-base.if",
              "position": [
                528,
                608
              ],
              "typeVersion": 2.2
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4.1-mini",
                  "cachedResultName": "gpt-4.1-mini"
                },
                "options": {}
              },
              "id": "b4cc6c08-2898-443c-b520-481b2da40be4",
              "name": "OpenAI Chat Model",
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "position": [
                -1392,
                1440
              ],
              "typeVersion": 1.2,
              "credentials": {
                "openAiApi": {
                  "id": "MBUFpYJbZEe5W0Tl",
                  "name": "OpenAi Fake account"
                }
              }
            },
            {
              "parameters": {
                "content": "## 3. Let the Agent execute any N8N Workflow\n[Learn more about the Execute Workflow node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/)\n\nFinally once the agent has gathered the required workflows, it will start performing the requested task by executing one or more available workflows. The desired behaviour is that the agent will use \"listWorkflows\" to see which workflows are \"active\" and then plan out how to use them. Attempts to use a workflow before adding it to the available pool will result in an error response.",
                "height": 600,
                "width": 1160,
                "color": 7
              },
              "id": "8084da9a-0bee-4f2e-9975-4b93912689f6",
              "name": "Sticky Note2",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -144,
                1024
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## 2. Dynamically manage a list of \"Available\" Workflows\n[Learn more about the n8n node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.n8n)\n\nThe idea is to limit the number of workflows the agent has access to in order to ensure undesired workflows or duplication of similar workflows are avoided. Here, we do this by managing a virtual list of workflows in memory using Redis - under the hood, it's just an array to store Workflow details.\n\nGood to note, the intended workflows must have **Subworkflow triggers** and ideally, with input schema set as well. This template analyses each workflow's JSON and captures its input schema as part of the workflow's description. Doing so,  when it comes time to execute, the agent will know in what format to set the parameters when calling the subworkflow.\n",
                "height": 300,
                "width": 740,
                "color": 7
              },
              "id": "a1e39a98-7e05-4c58-a516-6b583e4b3860",
              "name": "Sticky Note1",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -336,
                64
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "workflowId": {
                  "__rl": true,
                  "mode": "id",
                  "value": "={{ $('When Executed by Another Workflow').first().json.workflowIds }}"
                },
                "workflowInputs": {
                  "value": {},
                  "schema": [],
                  "mappingMode": "defineBelow",
                  "matchingColumns": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": true
                },
                "options": {
                  "waitForSubWorkflow": true
                }
              },
              "id": "25cf95e0-4845-47c5-8c7b-2e7f8508d726",
              "name": "Execute Workflow with PassThrough Variables",
              "type": "n8n-nodes-base.executeWorkflow",
              "position": [
                608,
                1232
              ],
              "executeOnce": false,
              "typeVersion": 1.2
            },
            {
              "parameters": {
                "content": "## 1. Add MCP Server Trigger\n[Read more about the MCP server trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/)",
                "height": 740,
                "width": 720,
                "color": 7
              },
              "id": "d3537233-8c6f-456e-82ee-8b5cfdcc5522",
              "name": "Sticky Note",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -1664,
                288
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "name": "executeTool",
                "description": "Executes a workflow which has been added to the pool of available workflows for the agent.",
                "workflowId": {
                  "__rl": true,
                  "mode": "id",
                  "value": "={{ $workflow.id }}"
                },
                "workflowInputs": {
                  "value": {
                    "operation": "executeWorkflow",
                    "parameters": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters', ``, 'string') }}",
                    "workflowIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('workflowIds', ``, 'string') }}"
                  },
                  "schema": [
                    {
                      "id": "operation",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "operation",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "workflowIds",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "workflowIds",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "parameters",
                      "type": "object",
                      "display": true,
                      "required": false,
                      "displayName": "parameters",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    }
                  ],
                  "mappingMode": "defineBelow",
                  "matchingColumns": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "id": "69a98dbf-3711-4532-8baf-0c26f05ab4d0",
              "name": "ExecuteWorkflow",
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "position": [
                -1072,
                672
              ],
              "typeVersion": 2.1
            },
            {
              "parameters": {
                "name": "searchTool",
                "description": "Returns all workflows which can be added to the pool of available workflows for the agent.",
                "workflowId": {
                  "__rl": true,
                  "mode": "id",
                  "value": "={{ $workflow.id }}"
                },
                "workflowInputs": {
                  "value": {
                    "operation": "searchWorkflows",
                    "parameters": "null",
                    "workflowIds": "null"
                  },
                  "schema": [
                    {
                      "id": "operation",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "operation",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "workflowIds",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "workflowIds",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "parameters",
                      "type": "object",
                      "display": true,
                      "required": false,
                      "displayName": "parameters",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    }
                  ],
                  "mappingMode": "defineBelow",
                  "matchingColumns": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "id": "832ab088-f4aa-4519-b0b1-798cb0e79391",
              "name": "SearchWorkflows",
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "position": [
                -1200,
                768
              ],
              "typeVersion": 2.1
            },
            {
              "parameters": {
                "name": "listTool",
                "description": "Lists the available pool of workflows for the agent.",
                "workflowId": {
                  "__rl": true,
                  "mode": "id",
                  "value": "={{ $workflow.id }}"
                },
                "workflowInputs": {
                  "value": {
                    "operation": "listWorkflows",
                    "parameters": "null",
                    "workflowIds": "null"
                  },
                  "schema": [
                    {
                      "id": "operation",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "operation",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "workflowIds",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "workflowIds",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "parameters",
                      "type": "object",
                      "display": true,
                      "required": false,
                      "displayName": "parameters",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    }
                  ],
                  "mappingMode": "defineBelow",
                  "matchingColumns": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "id": "e0544ef2-628d-452f-bb10-03093ee4060f",
              "name": "List Workflows",
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "position": [
                -1312,
                864
              ],
              "typeVersion": 2.1
            },
            {
              "parameters": {
                "name": "removeWorkflow",
                "description": "Removes one or more workflows by ID from the available pool of workflows for the agent.",
                "workflowId": {
                  "__rl": true,
                  "mode": "id",
                  "value": "={{ $workflow.id }}"
                },
                "workflowInputs": {
                  "value": {
                    "operation": "removeWorkflow",
                    "parameters": "null",
                    "workflowIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('workflowIds', ``, 'string') }}"
                  },
                  "schema": [
                    {
                      "id": "operation",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "operation",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "workflowIds",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "workflowIds",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "parameters",
                      "type": "object",
                      "display": true,
                      "required": false,
                      "displayName": "parameters",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    }
                  ],
                  "mappingMode": "defineBelow",
                  "matchingColumns": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "id": "27470639-b732-4f06-8179-e85f35895df5",
              "name": "RemoveWorkflow",
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "position": [
                -1440,
                768
              ],
              "typeVersion": 2.1
            },
            {
              "parameters": {
                "name": "addWorkflow",
                "description": "Adds one or more workflows by ID to the available pool of workflows for the agent. You can get a list of workflows by calling the listTool tool.",
                "workflowId": {
                  "__rl": true,
                  "mode": "id",
                  "value": "={{ $workflow.id }}"
                },
                "workflowInputs": {
                  "value": {
                    "operation": "addWorkflow",
                    "parameters": "null",
                    "workflowIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('workflowIds', ``, 'string') }}"
                  },
                  "schema": [
                    {
                      "id": "operation",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "operation",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "workflowIds",
                      "type": "string",
                      "display": true,
                      "required": false,
                      "displayName": "workflowIds",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "parameters",
                      "type": "object",
                      "display": true,
                      "required": false,
                      "displayName": "parameters",
                      "defaultMatch": false,
                      "canBeUsedToMatch": true
                    }
                  ],
                  "mappingMode": "defineBelow",
                  "matchingColumns": [],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                }
              },
              "id": "2d868973-75fb-418a-9f0f-92c42364cc2e",
              "name": "Add Workflow",
              "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
              "position": [
                -1536,
                672
              ],
              "typeVersion": 2.1
            },
            {
              "parameters": {
                "path": "4625bcf4-0dd9-4562-a70f-6fee41f6f12d"
              },
              "id": "0167cb21-6cf8-4c80-bf26-cf75ef3b2a12",
              "name": "N8N Workflows MCP Server",
              "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
              "position": [
                -1456,
                448
              ],
              "webhookId": "4625bcf4-0dd9-4562-a70f-6fee41f6f12d",
              "typeVersion": 1
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "15aef770-639e-4df0-900f-29013ccd00c4",
                      "operator": {
                        "type": "object",
                        "operation": "notEmpty",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json }}",
                      "rightValue": ""
                    }
                  ]
                },
                "options": {}
              },
              "id": "ce3ffe99-cac9-4c11-ad77-40ff2383fd21",
              "name": "Workflow Exists?",
              "type": "n8n-nodes-base.if",
              "position": [
                304,
                400
              ],
              "typeVersion": 2.2
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "2fa3e311-e836-42f4-922a-fae19d8e0267",
                      "name": "response",
                      "type": "string",
                      "value": "=Expected workflow to be available but not yet added. You can only use workflows which have been added to the available pool. Use the listWorkflows tool to see available workflows."
                    }
                  ]
                },
                "options": {}
              },
              "id": "4456327c-9566-4bfc-ae55-e2cd67e08b75",
              "name": "ExecuteTool Error",
              "type": "n8n-nodes-base.set",
              "position": [
                352,
                1424
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "9c9df00b-b090-4773-8012-1824b4eeb13f",
                      "operator": {
                        "type": "object",
                        "operation": "exists",
                        "singleValue": true
                      },
                      "leftValue": "={{\n$json.data.find(d => d.id === $('When Executed by Another Workflow').item.json.workflowIds)\n}}",
                      "rightValue": ""
                    }
                  ]
                },
                "options": {}
              },
              "id": "4dbe2c3d-321d-4d98-a7d8-c2ecd40c70cd",
              "name": "Has Workflow Available?",
              "type": "n8n-nodes-base.if",
              "position": [
                128,
                1328
              ],
              "typeVersion": 2.2
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bce29a06-cff6-4409-96d2-04cc858a0e98",
                      "name": "data",
                      "type": "array",
                      "value": "={{ $json.data.parseJson() }}"
                    }
                  ]
                },
                "options": {}
              },
              "id": "ab6cbc43-1aab-41c0-a7bd-cda40055748b",
              "name": "Convert to JSON1",
              "type": "n8n-nodes-base.set",
              "position": [
                -96,
                1328
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "contextWindowLength": 30
              },
              "id": "77723a93-9437-4806-a32c-1a0d53f3d3c0",
              "name": "Simple Memory",
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "position": [
                -1232,
                1440
              ],
              "typeVersion": 1.3
            },
            {
              "parameters": {
                "sseEndpoint": "=<Production URL of MCP Server>"
              },
              "id": "d35812ee-a1e8-49f2-a229-850b0e90d172",
              "name": "MCP Client",
              "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
              "position": [
                -1104,
                1440
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "aa4184ec-edf4-493e-a92a-2724f4ed497a",
              "name": "When chat message received",
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "position": [
                -1584,
                1248
              ],
              "webhookId": "86a50552-8058-4896-bd7e-ab95eba073ce",
              "typeVersion": 1.1
            },
            {
              "parameters": {
                "options": {
                  "systemMessage": "=You are a helpful assistant who only uses workflows to answer questions and perform tasks.\n* When asked to complete a task, you will assume there is a workflow which you can use. Do not generate custom scripts or raw commands - use a workflow isntead.\n* Only use the available active workflows as listed using the \"listWorkflows\" tool.\n* Workflows returned by \"listWorkflows\" tool are active in the pool and do not need to be added again.\n* Always ask the user before adding workflows to the availble pool.\n* You do not need to confirm each step with the user when executing workflows.\n* When executing the workflow, the required parameters schema for it is listed in the workflow's profile. To get this profile, use the listWokflows tool.\n* If no available workflows are suitable and you are not able to complete the task, simply let the user know.\n* Do not search for workflows in the directory unless the user requests."
                }
              },
              "id": "103d2529-df8d-4ac6-809e-900aa738c7b1",
              "name": "AI Agent",
              "type": "@n8n/n8n-nodes-langchain.agent",
              "position": [
                -1344,
                1248
              ],
              "typeVersion": 1.8
            },
            {
              "parameters": {
                "aggregate": "aggregateAllItemData",
                "destinationFieldName": "response",
                "options": {}
              },
              "id": "2186bb9d-de43-4510-a3a7-8bd094b151bc",
              "name": "executeTool Result",
              "type": "n8n-nodes-base.aggregate",
              "position": [
                832,
                1232
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "={{ $('When Executed by Another Workflow').first().json.parameters }}",
                "options": {}
              },
              "id": "2ec3f277-016c-40c2-9756-f3ff1c2366d9",
              "name": "Get Parameters",
              "type": "n8n-nodes-base.set",
              "position": [
                352,
                1232
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "aggregate": "aggregateAllItemData",
                "destinationFieldName": "response",
                "options": {}
              },
              "id": "fdfec666-9524-4a02-bb41-142a12a0e7e7",
              "name": "listTools Success1",
              "type": "n8n-nodes-base.aggregate",
              "position": [
                528,
                800
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "821226b0-12ad-4d1d-81c3-dfa3c286cce4",
                      "name": "id",
                      "type": "string",
                      "value": "={{ $json.id }}"
                    },
                    {
                      "id": "629d95d6-2501-4ad4-a5ed-e557237e1cc2",
                      "name": "name",
                      "type": "string",
                      "value": "={{ $json.name }}"
                    },
                    {
                      "id": "30699f7c-98d3-44ee-9749-c5528579f7e6",
                      "name": "description",
                      "type": "string",
                      "value": "={{\n$json.nodes\n  .filter(node => node.type === 'n8n-nodes-base.stickyNote')\n  .filter(node => node.parameters.content.toLowerCase().includes('try it out'))\n  .map(node => node.parameters.content.substr(0,255) + '...')\n  .join('\\n')\n}}"
                    },
                    {
                      "id": "137221ef-f0a3-4441-bae7-d9d4a22e05b7",
                      "name": "parameters",
                      "type": "string",
                      "value": "={{\n(function(node) {\n  if (!node) return {};\n  const inputs = node.parameters.workflowInputs.values;\n  return {\n    \"type\": \"object\",\n    \"required\": inputs.map(input => input.name),\n    \"properties\": inputs.reduce((acc, input) => ({\n      ...acc,\n      [input.name]: { type: input.type ?? 'string' }\n    }), {})\n  }\n})(\n$json.nodes\n  .filter(node => node.type === 'n8n-nodes-base.executeWorkflowTrigger')\n  .first()\n)\n.toJsonString()\n}}"
                    }
                  ]
                },
                "options": {}
              },
              "id": "c8e53929-4edb-474c-a4ee-6a591bc78a4c",
              "name": "Simplify Workflows1",
              "type": "n8n-nodes-base.set",
              "position": [
                304,
                800
              ],
              "executeOnce": false,
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "filters": {
                  "tags": "mcp"
                },
                "requestOptions": {}
              },
              "id": "aa02e9a1-b63b-4a8b-bd1b-ea517b03f899",
              "name": "Get MCP-tagged Workflows1",
              "type": "n8n-nodes-base.n8n",
              "position": [
                96,
                800
              ],
              "typeVersion": 1,
              "credentials": {
                "n8nApi": {
                  "id": "qbFCYZ5EUrYwtknS",
                  "name": "n8n account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bce29a06-cff6-4409-96d2-04cc858a0e98",
                      "name": "response",
                      "type": "array",
                      "value": "={{\n$json.data\n  ? $json.data.parseJson()\n  : []\n}}"
                    }
                  ]
                },
                "options": {}
              },
              "id": "ae67d16a-b52f-46fe-a48f-c0ea678356cb",
              "name": "listTools Success",
              "type": "n8n-nodes-base.set",
              "position": [
                -128,
                800
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "bce29a06-cff6-4409-96d2-04cc858a0e98",
                      "name": "data",
                      "type": "array",
                      "value": "={{ $json.data.parseJson() }}"
                    }
                  ]
                },
                "options": {}
              },
              "id": "b5bf1a70-7fd3-4673-9e2d-62e0d1970301",
              "name": "Convert to JSON",
              "type": "n8n-nodes-base.set",
              "position": [
                -128,
                608
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "1368947f-6625-4e2e-ae27-0fcad0a1d12a",
                      "name": "response",
                      "type": "string",
                      "value": "={{ $('When Executed by Another Workflow').first().json.workflowIds.split(',').length }} tool(s) removed successfully."
                    }
                  ]
                },
                "options": {}
              },
              "id": "5d5e28bd-4559-4e11-a969-7597078c6d34",
              "name": "Remove Tool Success",
              "type": "n8n-nodes-base.set",
              "position": [
                976,
                608
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "operation": "set",
                "key": "mcp_n8n_tools",
                "value": "={{ $input.all().flatMap(item => item.json.data).compact() }}"
              },
              "id": "c3a50673-2b36-4de0-8eba-44fee95b9d39",
              "name": "Store In Memory1",
              "type": "n8n-nodes-base.redis",
              "position": [
                752,
                704
              ],
              "executeOnce": true,
              "typeVersion": 1,
              "credentials": {
                "redis": {
                  "id": "9A9jRCLFUCHOPuJK",
                  "name": "Redis account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "d2c149fb-d115-449b-9b74-f3c2f8ff7950",
                      "operator": {
                        "type": "boolean",
                        "operation": "false",
                        "singleValue": true
                      },
                      "leftValue": "={{\n$json.id\n  ? $('Operations').first().json.workflowIds.split(',').includes($json.id)\n  : false\n}}",
                      "rightValue": ""
                    }
                  ]
                },
                "options": {}
              },
              "id": "8bb5ba61-6a45-4ba0-85b8-69901c889e87",
              "name": "Filter Matching IDs",
              "type": "n8n-nodes-base.filter",
              "position": [
                304,
                608
              ],
              "typeVersion": 2.2,
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "fieldToSplitOut": "data",
                "options": {}
              },
              "id": "462420cf-d7ee-4480-b2a5-be963a5831c9",
              "name": "Split Out",
              "type": "n8n-nodes-base.splitOut",
              "position": [
                96,
                608
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "operation": "get",
                "propertyName": "data",
                "key": "mcp_n8n_tools",
                "options": {}
              },
              "id": "1d104811-db86-4491-b29a-c25eaa3d5c1c",
              "name": "Get Memory",
              "type": "n8n-nodes-base.redis",
              "position": [
                -592,
                800
              ],
              "typeVersion": 1,
              "credentials": {
                "redis": {
                  "id": "9A9jRCLFUCHOPuJK",
                  "name": "Redis account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8c4e0763-a4ff-4e8a-a992-13e4e12a5685",
                      "name": "response",
                      "type": "string",
                      "value": "Expected Tools matching Ids given, but none found."
                    }
                  ]
                },
                "options": {}
              },
              "id": "8e2af8ab-09d5-473a-af8c-7a9d6d58d406",
              "name": "AddTool Error",
              "type": "n8n-nodes-base.set",
              "position": [
                528,
                400
              ],
              "executeOnce": true,
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "d921063f-e8ed-44a8-95a0-4402ecde6c5d",
                      "name": "=response",
                      "type": "string",
                      "value": "={{ $('Simplify Workflows').all().length }} tools were added successfully."
                    }
                  ]
                },
                "options": {}
              },
              "id": "bf8a28cf-b9bc-4a76-a3f9-d3a30051e6f3",
              "name": "AddTool Success",
              "type": "n8n-nodes-base.set",
              "position": [
                976,
                192
              ],
              "executeOnce": true,
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "operation": "set",
                "key": "mcp_n8n_tools",
                "value": "={{\n($('Get Memory').item.json.data?.parseJson() ?? [])\n  .concat($input.all().map(item => item.json))\n  .toJsonString()\n}}"
              },
              "id": "1b1c2074-d867-4dcf-8739-cf4e94c74be2",
              "name": "Store In Memory",
              "type": "n8n-nodes-base.redis",
              "position": [
                752,
                208
              ],
              "executeOnce": true,
              "typeVersion": 1,
              "credentials": {
                "redis": {
                  "id": "9A9jRCLFUCHOPuJK",
                  "name": "Redis account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "90c97733-48de-4402-8388-5d49e3534388",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "leftValue": "={{\n$json.id\n  ? $('When Executed by Another Workflow').first().json.workflowIds.split(',').includes($json.id)\n  : false\n}}",
                      "rightValue": "={{ $json.id }}"
                    }
                  ]
                },
                "options": {}
              },
              "id": "a8fae7ee-699c-40c9-85f3-2fbdc0bafafe",
              "name": "Filter Matching Ids",
              "type": "n8n-nodes-base.filter",
              "position": [
                96,
                400
              ],
              "executeOnce": false,
              "typeVersion": 2.2,
              "alwaysOutputData": true
            },
            {
              "parameters": {
                "filters": {
                  "tags": "mcp"
                },
                "requestOptions": {}
              },
              "id": "e0451bef-7119-4f50-8d1d-acf1c1959a46",
              "name": "Get MCP-tagged Workflows",
              "type": "n8n-nodes-base.n8n",
              "position": [
                -128,
                400
              ],
              "typeVersion": 1,
              "credentials": {
                "n8nApi": {
                  "id": "qbFCYZ5EUrYwtknS",
                  "name": "n8n account"
                }
              }
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "version": 2,
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "3254a8f9-5fd3-4089-be16-cc3fd20639b8",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $('When Executed by Another Workflow').first().json.operation }}",
                            "rightValue": "addWorkflow"
                          }
                        ]
                      },
                      "renameOutput": true,
                      "outputKey": "Add"
                    },
                    {
                      "conditions": {
                        "options": {
                          "version": 2,
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "a33dd02d-5192-48c9-b569-eafddabd2462",
                            "operator": {
                              "name": "filter.operator.equals",
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $('When Executed by Another Workflow').first().json.operation }}",
                            "rightValue": "removeWorkflow"
                          }
                        ]
                      },
                      "renameOutput": true,
                      "outputKey": "remove"
                    },
                    {
                      "conditions": {
                        "options": {
                          "version": 2,
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "2d68dc3f-a213-47f8-8453-1bceae404653",
                            "operator": {
                              "name": "filter.operator.equals",
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $('When Executed by Another Workflow').first().json.operation }}",
                            "rightValue": "listWorkflows"
                          }
                        ]
                      },
                      "renameOutput": true,
                      "outputKey": "list"
                    },
                    {
                      "conditions": {
                        "options": {
                          "version": 2,
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "2146a87e-1a50-4caa-a2ee-f7f6fc2b19c9",
                            "operator": {
                              "name": "filter.operator.equals",
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $('When Executed by Another Workflow').first().json.operation }}",
                            "rightValue": "searchWorkflows"
                          }
                        ]
                      },
                      "renameOutput": true,
                      "outputKey": "search"
                    },
                    {
                      "conditions": {
                        "options": {
                          "version": 2,
                          "leftValue": "",
                          "caseSensitive": true,
                          "typeValidation": "strict"
                        },
                        "combinator": "and",
                        "conditions": [
                          {
                            "id": "98b25a51-2cb5-49af-9609-827245595dc9",
                            "operator": {
                              "name": "filter.operator.equals",
                              "type": "string",
                              "operation": "equals"
                            },
                            "leftValue": "={{ $('When Executed by Another Workflow').first().json.operation }}",
                            "rightValue": "executeWorkflow"
                          }
                        ]
                      },
                      "renameOutput": true,
                      "outputKey": "execute"
                    }
                  ]
                },
                "options": {}
              },
              "id": "743a74d8-0e91-47be-8082-a7fedd3dc4cf",
              "name": "Operations",
              "type": "n8n-nodes-base.switch",
              "position": [
                -400,
                768
              ],
              "typeVersion": 3.2
            },
            {
              "parameters": {
                "workflowInputs": {
                  "values": [
                    {
                      "name": "operation"
                    },
                    {
                      "name": "workflowIds"
                    },
                    {
                      "name": "parameters",
                      "type": "object"
                    }
                  ]
                }
              },
              "id": "a789dccc-70bf-414c-bcf6-d884daf7097c",
              "name": "When Executed by Another Workflow",
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "position": [
                -800,
                800
              ],
              "typeVersion": 1.1
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "821226b0-12ad-4d1d-81c3-dfa3c286cce4",
                      "name": "id",
                      "type": "string",
                      "value": "={{ $json.id }}"
                    },
                    {
                      "id": "629d95d6-2501-4ad4-a5ed-e557237e1cc2",
                      "name": "name",
                      "type": "string",
                      "value": "={{ $json.name }}"
                    },
                    {
                      "id": "30699f7c-98d3-44ee-9749-c5528579f7e6",
                      "name": "description",
                      "type": "string",
                      "value": "={{\n$json.nodes\n  .filter(node => node.type === 'n8n-nodes-base.stickyNote')\n  .filter(node => node.parameters.content.toLowerCase().includes('try it out'))\n  .map(node => node.parameters.content.substr(0,255) + '...')\n  .join('\\n')\n}}"
                    },
                    {
                      "id": "6199c275-1ced-4f72-ba59-cb068db54c1b",
                      "name": "parameters",
                      "type": "string",
                      "value": "={{\n(function(node) {\n  if (!node) return {};\n  const inputs = node.parameters.workflowInputs.values;\n  return {\n    \"type\": \"object\",\n    \"required\": inputs.map(input => input.name),\n    \"properties\": inputs.reduce((acc, input) => ({\n      ...acc,\n      [input.name]: { type: input.type ?? 'string' }\n    }), {})\n  }\n})(\n$json.nodes\n  .filter(node => node.type === 'n8n-nodes-base.executeWorkflowTrigger')\n  .first()\n)\n.toJsonString()\n}}"
                    }
                  ]
                },
                "options": {}
              },
              "id": "599e82ab-2e1b-49f4-8ed1-d63c71fbd5a6",
              "name": "Simplify Workflows",
              "type": "n8n-nodes-base.set",
              "position": [
                528,
                208
              ],
              "executeOnce": false,
              "typeVersion": 3.4
            }
          ],
          "connections": {
            "Is Empty Array?": {
              "main": [
                [
                  {
                    "node": "Delete Key",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Store In Memory1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "ExecuteWorkflow": {
              "ai_tool": [
                [
                  {
                    "node": "N8N Workflows MCP Server",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "SearchWorkflows": {
              "ai_tool": [
                [
                  {
                    "node": "N8N Workflows MCP Server",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "List Workflows": {
              "ai_tool": [
                [
                  {
                    "node": "N8N Workflows MCP Server",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "RemoveWorkflow": {
              "ai_tool": [
                [
                  {
                    "node": "N8N Workflows MCP Server",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Workflow": {
              "ai_tool": [
                [
                  {
                    "node": "N8N Workflows MCP Server",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Has Workflow Available?": {
              "main": [
                [
                  {
                    "node": "Get Parameters",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "ExecuteTool Error",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Convert to JSON1": {
              "main": [
                [
                  {
                    "node": "Has Workflow Available?",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory": {
              "ai_memory": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            },
            "MCP Client": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "When chat message received": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow with PassThrough Variables": {
              "main": [
                [
                  {
                    "node": "executeTool Result",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Parameters": {
              "main": [
                [
                  {
                    "node": "Execute Workflow with PassThrough Variables",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Simplify Workflows1": {
              "main": [
                [
                  {
                    "node": "listTools Success1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get MCP-tagged Workflows1": {
              "main": [
                [
                  {
                    "node": "Simplify Workflows1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Convert to JSON": {
              "main": [
                [
                  {
                    "node": "Split Out",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Delete Key": {
              "main": [
                [
                  {
                    "node": "Remove Tool Success",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Store In Memory1": {
              "main": [
                [
                  {
                    "node": "Remove Tool Success",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Filter Matching IDs": {
              "main": [
                [
                  {
                    "node": "Is Empty Array?",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Split Out": {
              "main": [
                [
                  {
                    "node": "Filter Matching IDs",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get Memory": {
              "main": [
                [
                  {
                    "node": "Operations",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Workflow Exists?": {
              "main": [
                [
                  {
                    "node": "Simplify Workflows",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "AddTool Error",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Store In Memory": {
              "main": [
                [
                  {
                    "node": "AddTool Success",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Filter Matching Ids": {
              "main": [
                [
                  {
                    "node": "Workflow Exists?",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get MCP-tagged Workflows": {
              "main": [
                [
                  {
                    "node": "Filter Matching Ids",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Operations": {
              "main": [
                [
                  {
                    "node": "Get MCP-tagged Workflows",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Convert to JSON",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "listTools Success",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Get MCP-tagged Workflows1",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Convert to JSON1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When Executed by Another Workflow": {
              "main": [
                [
                  {
                    "node": "Get Memory",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Simplify Workflows": {
              "main": [
                [
                  {
                    "node": "Store In Memory",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "2be0d38a-d427-4abd-bce1-7aa95ac0eee4",
          "triggerCount": 0,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-08T18:36:12.953Z",
          "updatedAt": "2025-08-13T15:25:27.000Z",
          "id": "iXnVBQoySTXvS9do",
          "name": "37 whatsapp Template",
          "active": true,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c285b704-a505-4d8a-a018-83f7cc0070f0",
                      "leftValue": "={{ $json.body.MessageType }}",
                      "rightValue": "interactive",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                -496,
                1248
              ],
              "id": "415ebc66-12f6-42cd-b913-261f9ee41381",
              "name": "Check if Template"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.twilio.com/2010-04-01/Accounts/AC512855366730e39b4a0857b16fb14f27/Messages.json",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpBasicAuth",
                "sendBody": true,
                "contentType": "form-urlencoded",
                "bodyParameters": {
                  "parameters": [
                    {
                      "name": "To",
                      "value": "={{ $json.body.From }}"
                    },
                    {
                      "name": "From",
                      "value": "={{ $json.body.To }}"
                    },
                    {
                      "name": "ContentSid",
                      "value": "HX1e61379c3b952c91f8c8889eff674b3b"
                    },
                    {
                      "name": "ContentVariables",
                      "value": "={\"user_name\":\"{{ $json.body.ProfileName }}\"}"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                80,
                1392
              ],
              "id": "2a15fe12-37cd-4d19-b06a-07019e1d6b68",
              "name": "Send Template",
              "credentials": {
                "httpBasicAuth": {
                  "id": "r3Hp5Vy6qya7XL5n",
                  "name": "Twillio Credential"
                }
              }
            },
            {
              "parameters": {
                "rules": {
                  "values": [
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "leftValue": "={{ $json.body.ButtonPayload }}",
                            "rightValue": "buy_ticket",
                            "operator": {
                              "type": "string",
                              "operation": "equals"
                            },
                            "id": "a7c6ca04-7747-406d-ab76-cd29c0e07c09"
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Buy Ticket"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "623c6501-41f9-456d-864f-72f89f0ec8a6",
                            "leftValue": "={{ $json.body.ButtonPayload }}",
                            "rightValue": "retrieve_ticket",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Retrieve Ticket"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "891a1b62-8d96-4598-8013-2777b047abc2",
                            "leftValue": "={{ $json.body.ButtonPayload }}",
                            "rightValue": "last_transaction",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Last Transaction"
                    },
                    {
                      "conditions": {
                        "options": {
                          "caseSensitive": true,
                          "leftValue": "",
                          "typeValidation": "strict",
                          "version": 2
                        },
                        "conditions": [
                          {
                            "id": "6205daa5-5cf0-4496-8253-fc8038b62824",
                            "leftValue": "={{ $json.body.ButtonPayload }}",
                            "rightValue": "main_menu",
                            "operator": {
                              "type": "string",
                              "operation": "equals",
                              "name": "filter.operator.equals"
                            }
                          }
                        ],
                        "combinator": "and"
                      },
                      "renameOutput": true,
                      "outputKey": "Main Menu"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.switch",
              "typeVersion": 3.2,
              "position": [
                -272,
                1072
              ],
              "id": "922c8826-4c65-4d5e-9f81-38259fc8a58f",
              "name": "Switch"
            },
            {
              "parameters": {
                "path": "buy-ticket",
                "options": {}
              },
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2,
              "position": [
                -720,
                1616
              ],
              "id": "f9d0442d-9217-42e6-94f1-f67194060229",
              "name": "Buy Ticket",
              "webhookId": "5ea75425-fe06-4446-acb0-d853031293b8"
            },
            {
              "parameters": {
                "method": "POST",
                "url": "=https://api.twilio.com/2010-04-01/Accounts/AC512855366730e39b4a0857b16fb14f27/Messages.json",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpBasicAuth",
                "sendBody": true,
                "contentType": "form-urlencoded",
                "bodyParameters": {
                  "parameters": [
                    {
                      "name": "To",
                      "value": "={{ $json.body.From }}"
                    },
                    {
                      "name": "From",
                      "value": "={{ $json.body.To }}"
                    },
                    {
                      "name": "ContentSid",
                      "value": "HX579573426c1b81f85c59ee8cba0b9629"
                    },
                    {
                      "name": "ContentVariables",
                      "value": "={\"wid\":\"{{ $json.body.WaId }}\"}"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                160,
                784
              ],
              "id": "e6f0a30c-08da-4c79-9848-fd5f62e9870a",
              "name": "Buy Ticket Template",
              "credentials": {
                "httpBasicAuth": {
                  "id": "r3Hp5Vy6qya7XL5n",
                  "name": "Twillio Credential"
                }
              }
            },
            {
              "parameters": {
                "operation": "append",
                "documentId": {
                  "__rl": true,
                  "value": "1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE",
                  "mode": "list",
                  "cachedResultName": "Transaction DB",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE/edit?usp=drivesdk"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "Sheet1",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE/edit#gid=0"
                },
                "columns": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "WID": "={{ $json.query.wid }}",
                    "Date": "={{ $now }}",
                    "Status ": "success",
                    "Station A": "Andheri",
                    "Station B ": "Bandra",
                    "Paid Amount": "30"
                  },
                  "matchingColumns": [],
                  "schema": [
                    {
                      "id": "WID",
                      "displayName": "WID",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "Date",
                      "displayName": "Date",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "Status ",
                      "displayName": "Status ",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "Station A",
                      "displayName": "Station A",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "Station B ",
                      "displayName": "Station B ",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    },
                    {
                      "id": "Paid Amount",
                      "displayName": "Paid Amount",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true,
                      "removed": false
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheets",
              "typeVersion": 4.6,
              "position": [
                -496,
                1616
              ],
              "id": "c33a95c4-4325-461a-990a-b380a6148d15",
              "name": "Append row in sheet",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "Nn6MoNvB7CWuaQp9",
                  "name": "Lakshit Account"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.twilio.com/2010-04-01/Accounts/AC512855366730e39b4a0857b16fb14f27/Messages.json",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpBasicAuth",
                "sendBody": true,
                "contentType": "form-urlencoded",
                "bodyParameters": {
                  "parameters": [
                    {
                      "name": "To",
                      "value": "={{ $('Check if Template').item.json.body.From }}"
                    },
                    {
                      "name": "From",
                      "value": "={{ $('Check if Template').item.json.body.To }}"
                    },
                    {
                      "name": "Body",
                      "value": "={{ JSON.parse($json.output).output }}\n"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                640,
                1088
              ],
              "id": "4d8853bc-5cc5-4dd5-861d-5ac8f4a8d827",
              "name": "Send Normal Message",
              "credentials": {
                "httpBasicAuth": {
                  "id": "r3Hp5Vy6qya7XL5n",
                  "name": "Twillio Credential"
                }
              }
            },
            {
              "parameters": {
                "method": "POST",
                "url": "https://api.twilio.com/2010-04-01/Accounts/AC512855366730e39b4a0857b16fb14f27/Messages.json",
                "authentication": "genericCredentialType",
                "genericAuthType": "httpBasicAuth",
                "sendBody": true,
                "contentType": "form-urlencoded",
                "bodyParameters": {
                  "parameters": [
                    {
                      "name": "To",
                      "value": "=whatsapp:+{{ $json.WID }}"
                    },
                    {
                      "name": "From",
                      "value": "=whatsapp:+12678395989"
                    },
                    {
                      "name": "ContentSid",
                      "value": "HX00bf86d0e991e947493cd40b785e23f9"
                    },
                    {
                      "name": "ContentVariables",
                      "value": "={\"user_message\":\"To check your latest status of Ticket 👇.\"}"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4.2,
              "position": [
                -272,
                1616
              ],
              "id": "cd202a37-1e00-47e1-b145-28f25add5e9f",
              "name": "Main Menu Template",
              "credentials": {
                "httpBasicAuth": {
                  "id": "r3Hp5Vy6qya7XL5n",
                  "name": "Twillio Credential"
                }
              }
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=user_wid: {{ $json.body.From.replace('whatsapp:+','') }}\nuser_text: {{ $json.body.ButtonPayload }}\n\nUse the appropriate tool as per the system instructions and return ONLY:\n{\"output\":\"<message>\"}\n",
                "options": {
                  "systemMessage": "=You are the backend logic for the Maha Mumbai Metro (M³) WhatsApp chatbot.\n\nGoal\nDecide intent from user_text (Retrieve Ticket or Last Transaction), call the correct tool, format a WhatsApp-ready message, and return exactly one raw JSON object:\n{\"output\":\"<message>\"}\nNo other text, markdown, or keys.\n\nRules\n\nDetect intent (case-insensitive):\n\n“Retrieve Ticket” → intent = RETRIEVE_TICKET → call only retrieve_ticket\n\n“Last Transaction” → intent = LAST_TRANSACTION → call only last_transaction\n\nOtherwise: do not call tools; set message = \"Please select Retrieve Ticket or Last Transaction.\"\n\nTool usage:\n\nretrieve_ticket: filter WID = user_wid AND Status = \"success\", order by Date desc, limit 1.\n\nlast_transaction: filter WID = user_wid, order by Date desc, limit 1.\n\nFormatting:\n\nConvert ISO Date to Asia/Kolkata as \"DD MMM YYYY, hh:mm a\".\n\nMessages:\n\nRetrieve Ticket (success):\n✅ Ticket Found\nFrom: {Station A}\nTo: {Station B}\nAmount: ₹{Paid Amount}\nDate: {Local Date}\nWID: {WID}\n\nLast Transaction (success):\n✅ Last Transaction: SUCCESS\nFrom: {Station A}\nTo: {Station B}\nAmount: ₹{Paid Amount}\nDate: {Local Date}\nWID: {WID}\n\nLast Transaction (failure/other):\n❗ Last Transaction: {STATUS}\nDate: {Local Date}\nWID: {WID}\n\nNo data:\nWe couldn’t find any matching record. Please try “Buy Ticket” or check again later.\n\nFinal output requirement (critical):\n\nRespond with a single raw JSON object exactly like:\n{\"output\":\"<final WhatsApp message with \\n line breaks>\"}\n\nDo not wrap the JSON in quotes, do not add code fences, do not add explanations, tool traces, or extra keys."
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                112,
                992
              ],
              "id": "9e4e3610-77ef-4b7e-ac11-c7d04e8a1bf8",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
              "typeVersion": 1,
              "position": [
                112,
                1216
              ],
              "id": "4a5fa37c-b3ea-4d4c-b9f5-f2555bc68026",
              "name": "OpenRouter Chat Model",
              "credentials": {
                "openRouterApi": {
                  "id": "TLy9RuRkIKncoUiy",
                  "name": "OpenRouter Freelance account"
                }
              }
            },
            {
              "parameters": {
                "documentId": {
                  "__rl": true,
                  "value": "1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE",
                  "mode": "list",
                  "cachedResultName": "Transaction DB",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE/edit?usp=drivesdk"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "Sheet1",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE/edit#gid=0"
                },
                "filtersUI": {
                  "values": [
                    {
                      "lookupColumn": "WID",
                      "lookupValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', ``, 'string') }}"
                    },
                    {
                      "lookupColumn": "Status ",
                      "lookupValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values1_Value', ``, 'string') }}"
                    }
                  ]
                },
                "options": {
                  "returnFirstMatch": true
                }
              },
              "type": "n8n-nodes-base.googleSheetsTool",
              "typeVersion": 4.6,
              "position": [
                240,
                1216
              ],
              "id": "f5d45b74-2456-4848-a26f-518b554faf9e",
              "name": "retrieve_ticket",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "Nn6MoNvB7CWuaQp9",
                  "name": "Lakshit Account"
                }
              }
            },
            {
              "parameters": {
                "documentId": {
                  "__rl": true,
                  "value": "1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE",
                  "mode": "list",
                  "cachedResultName": "Transaction DB",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE/edit?usp=drivesdk"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "Sheet1",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1aFDhUmbHtRMKU7JHcUvC1H6AfXktl7tA5mGJ8n9POrE/edit#gid=0"
                },
                "filtersUI": {
                  "values": [
                    {
                      "lookupColumn": "WID",
                      "lookupValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', ``, 'string') }}"
                    }
                  ]
                },
                "options": {
                  "returnFirstMatch": true
                }
              },
              "type": "n8n-nodes-base.googleSheetsTool",
              "typeVersion": 4.6,
              "position": [
                368,
                1216
              ],
              "id": "70bc7352-e211-4784-ac39-b3bbf8c682b7",
              "name": "last_transaction",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "Nn6MoNvB7CWuaQp9",
                  "name": "Lakshit Account"
                }
              }
            },
            {
              "parameters": {
                "httpMethod": "POST",
                "path": "message-come",
                "options": {}
              },
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2,
              "position": [
                -720,
                1248
              ],
              "id": "2240275b-7d4b-46bb-af76-974581b229c3",
              "name": "Message callback",
              "webhookId": "439c0991-f274-48d2-b7ef-adddd721e8cf"
            }
          ],
          "connections": {
            "Check if Template": {
              "main": [
                [
                  {
                    "node": "Switch",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Send Template",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Switch": {
              "main": [
                [
                  {
                    "node": "Buy Ticket Template",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Send Template",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Buy Ticket": {
              "main": [
                [
                  {
                    "node": "Append row in sheet",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Append row in sheet": {
              "main": [
                [
                  {
                    "node": "Main Menu Template",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Buy Ticket Template": {
              "main": [
                []
              ]
            },
            "OpenRouter Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent": {
              "main": [
                [
                  {
                    "node": "Send Normal Message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "retrieve_ticket": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "last_transaction": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            },
            "Message callback": {
              "main": [
                [
                  {
                    "node": "Check if Template",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Twilio Trigger": {
              "sinkId": "DGa82483679ea2b761229004317ddc5d12",
              "subscriptionId": "DF52521e415742a4256355ba8481af5c03"
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "093b6709-5d38-406a-9704-3c8c12fc90c5",
          "triggerCount": 2,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-16T14:45:08.417Z",
          "updatedAt": "2025-08-16T18:23:42.000Z",
          "id": "jQuzq7veOG7ddTWH",
          "name": "39. Part 2. WNWn8n",
          "active": true,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "public": true,
                "options": {
                  "allowFileUploads": true,
                  "showWelcomeScreen": true,
                  "getStarted": "ANy kind of information ",
                  "customCss": ":root {\n  /* Colors */\n  --chat--color-primary: #e74266;\n  --chat--color-primary-shade-50: #db4061;\n  --chat--color-primary-shade-100: #cf3c5c;\n  --chat--color-secondary: #20b69e;\n  --chat--color-secondary-shade-50: #1ca08a;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f2f4f8;\n  --chat--color-light-shade-50: #e6e9f1;\n  --chat--color-light-shade-100: #c2c5cc;\n  --chat--color-medium: #d2d4d9;\n  --chat--color-dark: #101330;\n  --chat--color-disabled: #777980;\n  --chat--color-typing: #404040;\n\n  /* Base Layout */\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.25rem;\n  --chat--transition-duration: 0.15s;\n  --chat--font-family: (\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen-Sans,\n    Ubuntu,\n    Cantarell,\n    'Helvetica Neue',\n    sans-serif\n  );\n\n  /* Window Dimensions */\n  --chat--window--width: 400px;\n  --chat--window--height: 600px;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--window--border-radius: var(--chat--border-radius);\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* Header Styles */\n  --chat--header-height: auto;\n  --chat--header--padding: var(--chat--spacing);\n  --chat--header--background: var(--chat--color-dark);\n  --chat--header--color: var(--chat--color-light);\n  --chat--header--border-top: none;\n  --chat--header--border-bottom: none;\n  --chat--header--border-left: none;\n  --chat--header--border-right: none;\n  --chat--heading--font-size: 2em;\n  --chat--subtitle--font-size: inherit;\n  --chat--subtitle--line-height: 1.8;\n\n  /* Message Styles */\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: var(--chat--spacing);\n  --chat--message--border-radius: var(--chat--border-radius);\n  --chat--message-line-height: 1.5;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 1);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: var(--chat--color-dark);\n  --chat--message--bot--border: none;\n  --chat--message--user--background: var(--chat--color-secondary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n  --chat--message--pre--background: rgba(0, 0, 0, 0.05);\n  --chat--messages-list--padding: var(--chat--spacing);\n\n  /* Toggle Button */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n\n  /* Input Area */\n  --chat--textarea--height: 50px;\n  --chat--textarea--max-height: 30rem;\n  --chat--input--font-size: inherit;\n  --chat--input--border: 0;\n  --chat--input--border-radius: 0;\n  --chat--input--padding: 0.8rem;\n  --chat--input--background: var(--chat--color-white);\n  --chat--input--text-color: initial;\n  --chat--input--line-height: 1.5;\n  --chat--input--placeholder--font-size: var(--chat--input--font-size);\n  --chat--input--border-active: 0;\n  --chat--input--left--panel--width: 2rem;\n\n  /* Button Styles */\n  --chat--button--color: var(--chat--color-light);\n  --chat--button--background: var(--chat--color-primary);\n  --chat--button--padding: calc(var(--chat--spacing) * 1 / 2) var(--chat--spacing);\n  --chat--button--border-radius: var(--chat--border-radius);\n  --chat--button--hover--color: var(--chat--color-light);\n  --chat--button--hover--background: var(--chat--color-primary-shade-50);\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* Send and File Buttons */\n  --chat--input--send--button--background: var(--chat--color-white);\n  --chat--input--send--button--color: var(--chat--color-light);\n  --chat--input--send--button--background-hover: var(--chat--color-primary-shade-50);\n  --chat--input--send--button--color-hover: var(--chat--color-secondary-shade-50);\n  --chat--input--file--button--background: var(--chat--color-white);\n  --chat--input--file--button--color: var(--chat--color-secondary);\n  --chat--input--file--button--background-hover: var(--chat--input--file--button--background);\n  --chat--input--file--button--color-hover: var(--chat--color-secondary-shade-50);\n  --chat--files-spacing: 0.25rem;\n\n  /* Body and Footer */\n  --chat--body--background: var(--chat--color-light);\n  --chat--footer--background: var(--chat--color-light);\n  --chat--footer--color: var(--chat--color-dark);\n}\n\n\n/* You can override any class styles, too. Right-click inspect in Chat UI to find class to override. */\n.chat-message {\n\tmax-width: 50%;\n}",
                  "responseMode": "streaming"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "typeVersion": 1.3,
              "position": [
                -384,
                -144
              ],
              "id": "2568cad8-8a9c-4fb4-8cd2-c613956efc38",
              "name": "When chat message received",
              "webhookId": "37fef1c1-5ad6-42fd-ae04-6d4256a372d8"
            },
            {
              "parameters": {
                "options": {
                  "enableStreaming": true
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.2,
              "position": [
                -80,
                -32
              ],
              "id": "2ad37a7a-99da-45ff-ac7b-299667652f8c",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
              "typeVersion": 1,
              "position": [
                -224,
                176
              ],
              "id": "5a50cde9-a29c-4b09-aac9-641627155520",
              "name": "OpenRouter Chat Model",
              "credentials": {
                "openRouterApi": {
                  "id": "TLy9RuRkIKncoUiy",
                  "name": "OpenRouter Freelance account"
                }
              }
            },
            {
              "parameters": {
                "path": "26aec3e5-867a-4169-bd75-b33ae8974138",
                "responseMode": "streaming",
                "options": {}
              },
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2.1,
              "position": [
                -464,
                32
              ],
              "id": "934e5f1a-33f4-42a3-8287-8011b6fcc001",
              "name": "Webhook",
              "webhookId": "26aec3e5-867a-4169-bd75-b33ae8974138"
            },
            {
              "parameters": {
                "formTitle": "Title",
                "formDescription": "Example",
                "formFields": {
                  "values": [
                    {
                      "fieldLabel": "Name"
                    }
                  ]
                },
                "options": {
                  "customCss": ":root {\n\t--font-family: 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 600;\n\t--font-size-body: 12px;\n\t--font-size-label: 14px;\n\t--font-size-test-notice: 12px;\n\t--font-size-input: 14px;\n\t--font-size-header: 20px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 12px;\n\t--font-size-error: 12px;\n\t--font-size-html-h1: 28px;\n\t--font-size-html-h2: 20px;\n\t--font-size-html-h3: 16px;\n\t--font-size-html-h4: 14px;\n\t--font-size-html-h5: 12px;\n\t--font-size-html-h6: 10px;\n\t--font-size-subheader: 14px;\n\n\t/* Colors */\n\t--color-background: #fbfcfe;\n\t--color-test-notice-text: #e6a23d;\n\t--color-test-notice-bg: #fefaf6;\n\t--color-test-notice-border: #f6dcb7;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #dbdfe7;\n\t--color-card-shadow: rgba(99, 77, 255, 0.06);\n\t--color-link: #7e8186;\n\t--color-header: #525356;\n\t--color-label: #555555;\n\t--color-input-border: #dbdfe7;\n\t--color-input-text: #71747A;\n\t--color-focus-border: rgb(90, 76, 194);\n\t--color-submit-btn-bg: #ff6d5a;\n\t--color-submit-btn-text: #ffffff;\n\t--color-error: #ea1f30;\n\t--color-required: #ff6d5a;\n\t--color-clear-button-bg: #7e8186;\n\t--color-html-text: #555;\n\t--color-html-link: #ff6d5a;\n\t--color-header-subtext: #7e8186;\n\n\t/* Border Radii */\n\t--border-radius-card: 8px;\n\t--border-radius-input: 6px;\n\t--border-radius-clear-btn: 50%;\n\t--card-border-radius: 8px;\n\n\t/* Spacing */\n\t--padding-container-top: 24px;\n\t--padding-card: 24px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 24px;\n\t--margin-bottom-card: 16px;\n\t--padding-form-input: 12px;\n\t--card-padding: 24px;\n\t--card-margin-bottom: 16px;\n\n\t/* Dimensions */\n\t--container-width: 448px;\n\t--submit-btn-height: 48px;\n\t--checkbox-size: 18px;\n\n\t/* Others */\n\t--box-shadow-card: 0px 4px 16px 0px var(--color-card-shadow);\n\t--opacity-placeholder: 0.5;\n}"
                }
              },
              "type": "n8n-nodes-base.formTrigger",
              "typeVersion": 2.2,
              "position": [
                320,
                -192
              ],
              "id": "03b33975-b0f5-4d54-bcb7-992e5fa82b81",
              "name": "On form submission",
              "webhookId": "7de2f870-c33f-4530-893f-c9440b0fd11a"
            },
            {
              "parameters": {
                "resource": "video",
                "modelId": {
                  "__rl": true,
                  "mode": "list",
                  "value": ""
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.googleGemini",
              "typeVersion": 1,
              "position": [
                400,
                -80
              ],
              "id": "7fcc4c9a-e69b-455e-89fb-d8ce32cb749f",
              "name": "Generate a video",
              "credentials": {
                "googlePalmApi": {
                  "id": "fgiBtyytA2YZqlzZ",
                  "name": "Lakshit Google Gemini PaLM API"
                }
              }
            }
          ],
          "connections": {
            "When chat message received": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenRouter Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Webhook": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "40bbe188-ec6d-48a3-8f6f-759d0fa97601",
          "triggerCount": 3,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-03T15:25:55.779Z",
          "updatedAt": "2025-08-12T13:47:20.000Z",
          "id": "liLdiuvITsRm7IPZ",
          "name": "Finance Manager",
          "active": true,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "pollTimes": {
                  "item": [
                    {
                      "mode": "custom",
                      "cronExpression": "1 * * * * *"
                    }
                  ]
                },
                "filters": {
                  "sender": "credit_cards@icicibank.com"
                }
              },
              "type": "n8n-nodes-base.gmailTrigger",
              "typeVersion": 1.2,
              "position": [
                -336,
                -64
              ],
              "id": "a3df97ae-21fb-47e6-8595-f5ef169d5180",
              "name": "Gmail Trigger",
              "credentials": {
                "gmailOAuth2": {
                  "id": "9nQEWKuEYxxtGaYe",
                  "name": "Lakshit Gmail"
                }
              }
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "={{ $json.snippet }}",
                "hasOutputParser": true,
                "options": {
                  "systemMessage": "=You are a data extraction assistant.\n\nYour task is to extract credit card spend information from the email content provided. The email may or may not be related to a credit card transaction. Follow the instructions below carefully.\n\n---\n\n### Tasks:\n\n1. **Detect if the email is a credit card spend notification.**\n\n2. If it **is**, extract the following fields:\n   - `date`: Date of transaction (format: `MM-DD-YYYY`)\n   - `amount`: Final amount in INR (either original INR or converted)\n   - `currency`: Original currency of the transaction (e.g., INR, USD, EUR)\n   - `card_last4`: Last 4 digits of the card used\n   - `card_label`: Label of the card based on card number (see mapping)\n   - `merchant`: Merchant or location of the spend\n   - `actual_rate`: Amount in original currency (set to `null` if currency is INR)\n   - `conversion_rate`: Exchange rate used to convert the currency to INR (set to `null` if currency is INR)\n   - `success`: `true` if data is found, `false` if not a credit card spend email\n\n3. If the **currency is not INR**, use the following tool:\n   - Tool name: `search_currency_rate`\n   - Purpose: Get current exchange rate from original currency to INR\n   - Input format:\n     ```json\n     {\n       \"from_currency\": \"<currency_code>\",\n       \"to_currency\": \"INR\"\n     }\n     ```\n\n4. If **no relevant spend info is found**, return all fields as `null` except `success: false`.\n\n---\n\n### Card Mapping:\n- If card ends with **1012**, set `card_label` to `\"CC - Lakshit ICICI MMT\"`\n- If card ends with **4007**, set `card_label` to `\"CC - Lakshit ICICI Coral\"`\n- Otherwise, use `\"Unknown Card\"`\n\n---\n\n### Output Format:\n```json\n{\n  \"date\": \"MM-DD-YYYY or null\",\n  \"amount\": number or null,\n  \"currency\": \"INR or original currency or null\",\n  \"card_last4\": \"xxxx or null\",\n  \"card_label\": \"CC - Lakshit ICICI MMT / CC - Lakshit ICICI Coral / Unknown Card / null\",\n  \"merchant\": \"Merchant Name or null\",\n  \"actual_rate\": number or null,\n  \"conversion_rate\": number or null,\n  \"success\": true or false\n}\n"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                -64,
                -64
              ],
              "id": "a667e72f-0a02-409f-949e-56ae1e1c5c4b",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "schemaType": "manual",
                "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"date\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Date of transaction in MM-DD-YYYY format\"\n    },\n    \"amount\": {\n      \"type\": [\"number\", \"null\"],\n      \"description\": \"Amount in INR. If foreign currency, this is the converted amount\"\n    },\n    \"currency\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Original transaction currency\"\n    },\n    \"card_last4\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Last 4 digits of the credit card\"\n    },\n    \"card_label\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Credit card label based on last 4 digits\"\n    },\n    \"merchant\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Merchant or vendor name\"\n    },\n    \"actual_rate\": {\n      \"type\": [\"number\", \"null\"],\n      \"description\": \"Actual transaction amount in original currency; null for INR\"\n    },\n    \"conversion_rate\": {\n      \"type\": [\"number\", \"null\"],\n      \"description\": \"Conversion rate used to calculate amount in INR; null for INR\"\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"True if data is found, false if not a spend-related email\"\n    }\n  },\n  \"required\": [\"success\"]\n}\n"
              },
              "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
              "typeVersion": 1.3,
              "position": [
                192,
                192
              ],
              "id": "53141535-81bf-44fb-815f-65813106cbd8",
              "name": "Structured Output Parser"
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
              "typeVersion": 1,
              "position": [
                -112,
                160
              ],
              "id": "65f6ebfd-c154-4f98-b0b5-0ec84d19c126",
              "name": "OpenRouter Chat Model",
              "credentials": {
                "openRouterApi": {
                  "id": "TLy9RuRkIKncoUiy",
                  "name": "OpenRouter Freelance account"
                }
              }
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "cbf38c59-1a26-459d-9bb8-2e07f33ef24c",
                      "leftValue": "={{ $json.output.success }}",
                      "rightValue": "",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "type": "n8n-nodes-base.if",
              "typeVersion": 2.2,
              "position": [
                288,
                -64
              ],
              "id": "8649dcb5-7dd0-4729-919a-1d2073b77f0e",
              "name": "If"
            },
            {
              "parameters": {
                "resource": "databasePage",
                "databaseId": {
                  "__rl": true,
                  "value": "244b06aa-7d2e-80e8-8c6e-e17eba07807d",
                  "mode": "list",
                  "cachedResultName": "Credit Card Expense Tracker",
                  "cachedResultUrl": "https://www.notion.so/244b06aa7d2e80e88c6ee17eba07807d"
                },
                "title": "={{ $json.output.merchant }}",
                "propertiesUi": {
                  "propertyValues": [
                    {
                      "key": "Amount|number",
                      "numberValue": "={{ $json.output.amount }}"
                    },
                    {
                      "key": "Credit Card Name|select",
                      "selectValue": "={{ $json.output.card_label }}"
                    },
                    {
                      "key": "Date|date",
                      "date": "={{$now.minus({ hours: 5, minutes: 30 }).setZone('Asia/Kolkata').toFormat(\"LLL-dd-yyyy HH:mm\")}}",
                      "timezone": "Asia/Kolkata"
                    },
                    {
                      "key": "Name|title",
                      "title": "={{ $json.output.merchant }}"
                    },
                    {
                      "key": "Currency|rich_text",
                      "textContent": "={{ $json.output.currency }}"
                    },
                    {
                      "key": "Actual Rate|number",
                      "numberValue": "={{ $json.output.actual_rate }}"
                    },
                    {
                      "key": "Conversion Rate|number",
                      "numberValue": "={{ $json.output.conversion_rate }}"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.notion",
              "typeVersion": 2.2,
              "position": [
                560,
                -80
              ],
              "id": "ac36fac5-2867-41b2-93eb-2e65d57bd6fc",
              "name": "Create a database page",
              "credentials": {
                "notionApi": {
                  "id": "Akr0MBGdoTKKbHac",
                  "name": "Lakshit Notion"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
              "typeVersion": 1,
              "position": [
                16,
                176
              ],
              "id": "94710596-f0ed-4210-985f-4ff28995708d",
              "name": "search_currency_rate",
              "credentials": {
                "serpApi": {
                  "id": "PscrgeEmfOeflX4u",
                  "name": "Lakshit SerpAPI Account"
                }
              }
            }
          ],
          "connections": {
            "Gmail Trigger": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Structured Output Parser": {
              "ai_outputParser": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_outputParser",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenRouter Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent": {
              "main": [
                [
                  {
                    "node": "If",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If": {
              "main": [
                [
                  {
                    "node": "Create a database page",
                    "type": "main",
                    "index": 0
                  }
                ],
                []
              ]
            },
            "search_currency_rate": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": {
            "node:Gmail Trigger": {
              "Gmail Trigger": {
                "lastTimeChecked": 1755355311,
                "possibleDuplicates": [
                  "198b354747a91b4e"
                ]
              }
            }
          },
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {
            "Gmail Trigger": [
              {
                "json": {
                  "id": "1989e5c4cf2a2370",
                  "threadId": "1989cab4fd068afb",
                  "snippet": "Dear Customer, Your ICICI Bank Credit Card XX1012 has been used for a transaction of USD 20.00 on Aug 12, 2025 at 06:28:10. Info: OPENAI *CHATGPT SUBSCR. The Available Credit Limit on your card is INR",
                  "payload": {
                    "mimeType": "multipart/mixed"
                  },
                  "sizeEstimate": 13435,
                  "historyId": "11704557",
                  "internalDate": "1755003505000",
                  "labels": [
                    {
                      "id": "INBOX",
                      "name": "INBOX"
                    },
                    {
                      "id": "CATEGORY_UPDATES",
                      "name": "CATEGORY_UPDATES"
                    },
                    {
                      "id": "UNREAD",
                      "name": "UNREAD"
                    }
                  ],
                  "From": "credit_cards@icicibank.com",
                  "To": "LAKSHITUKANI77@gmail.com",
                  "Subject": "Transaction alert for your ICICI Bank Credit Card"
                }
              }
            ]
          },
          "versionId": "ac5cb853-c9ce-433a-a1cf-dd2cd85405a7",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-02T13:17:43.977Z",
          "updatedAt": "2025-08-08T18:35:59.000Z",
          "id": "mCmUx1dJ4jg4OqeP",
          "name": "36. Instagram DM plus manychat",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "httpMethod": "POST",
                "path": "b16bee2c-0994-4870-b003-abac76ba9b36",
                "responseMode": "responseNode",
                "options": {}
              },
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2,
              "position": [
                -272,
                0
              ],
              "id": "a716616b-6b0b-48e5-ab36-33aadec82bd6",
              "name": "Webhook",
              "webhookId": "b16bee2c-0994-4870-b003-abac76ba9b36"
            },
            {
              "parameters": {
                "respondWith": "allIncomingItems",
                "options": {}
              },
              "type": "n8n-nodes-base.respondToWebhook",
              "typeVersion": 1.4,
              "position": [
                496,
                0
              ],
              "id": "a81889a6-cd23-4015-a8e0-34d469ca39aa",
              "name": "Respond to Webhook"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=User Input:  {{ $json.body.userInput }}",
                "options": {
                  "systemMessage": "=You are FitBot, the AI assistant for Coach Luv, a certified personal trainer specializing in body transformation for busy professionals in India.\n\n## COACH BACKGROUND:\n8+ years experience in personal training across Mumbai and Delhi\nSpecializes in 12-week transformation programs designed for Indian lifestyle\nFocuses on busy professionals aged 25-45 working in IT, finance, and corporate sectors\nOffers both 1-on-1 coaching (₹8,000/month) and group programs (₹3,500/month)\nExpert in strength training, Indian nutrition planning, and habit formation for busy schedules\nUnderstands challenges of Indian work culture, family commitments, and dietary preferences\n\n## YOUR ROLE:\nYou qualify potential clients, assess their fitness goals, and determine if they're a good fit for Coach Luv's programs. Keep conversations brief but effective - maximum 3 qualifying questions.\n\n## CONVERSATION FLOW:\nIntroduce yourself as Coach Luv's assistant with a warm greeting\nAsk ONLY 3 key qualifying questions (one at a time, wait for response)\nBased on responses, determine qualification\nAsk for email address for consultation booking\nCall the lead_capture tool to add details to Google Sheets\nSend appropriate response with booking link\n\n## QUALIFYING QUESTIONS (Ask only 3, one at a time):\nQuestion 1: \"What's your main fitness goal right now - weight loss, muscle gain, or overall health improvement?\"\nQuestion 2: \"How many days per week can you realistically commit to working out, considering your work and family schedule?\"\nQuestion 3: \"Have you tried any fitness programs before, and are you ready to invest in a structured coaching program?\"\n\n## QUALIFICATION CRITERIA:\n✅ QUALIFIED (offer consultation):\nClear specific goals (lose 10+ kg, gain muscle, improve stamina)\nCan commit 3+ days per week\nReady to invest in coaching (mentions budget willingness or previous program experience)\nFirst time fitness program\n\n❌ NOT QUALIFIED (give free resources):\nVague goals (\"just want to be fit\")\nCan only commit 1-2 days per week\nLooking for completely free solutions\nNot ready to invest or make changes\n\n## TOOLS AVAILABLE:\nlead_capture: Add qualified leads to Google Sheets with email and conversation summary\n\n## RESPONSE TEMPLATES:\n\nFor QUALIFIED leads:\n\"Perfect! You sound like an ideal fit for Coach Luv's program. To schedule your free 20-minute consultation call, I'll need your email address. Coach Luv will personally discuss your goals and create a customized plan for your transformation.\"\n\nFor NOT QUALIFIED leads:\n\"Thanks for sharing! I can see you're interested in fitness. While you might not be ready for a structured program right now, I encourage you to start with some basic fitness habits. When you're ready to commit more time and invest in a structured transformation program, feel free to reach out again! Best of luck with your fitness journey! 🙌\"\n\n## AFTER COLLECTING EMAIL:\n\nFor QUALIFIED leads:\nCall lead_capture tool with: email, \"QUALIFIED\", conversation summary\nSend: \"Excellent! I've added you to Coach Luv's calendar system. Here's your free consultation booking link: https://calendly.com/coachluv/consultation - Choose a time that works for your schedule.\n\nAs a bonus, here's Coach Luv's free transformation guide to get you started: https://coachluv.com/free-guide\nCoach Luv is excited to help you achieve your transformation goals! 💪\"\n\nFor NOT QUALIFIED leads:\nDO NOT ask for email\nOnly send the normal message above\nDO NOT call any tools\nDO NOT send any links\n\n## TONE & PERSONALITY:\nWarm and encouraging, using Indian expressions naturally\nProfessional but friendly\nUnderstanding of Indian work-life challenges\nMotivational without being pushy\nUse appropriate emojis to keep it engaging\n\n## IMPORTANT NOTES:\nKeep responses concise and conversational\nAsk questions one at a time, don't overwhelm\nAlways collect email before sharing any links\nUse the lead_capture tool for EVERY lead (qualified or not)\nRespect budget constraints common in Indian market\nBe understanding of family and work commitments typical in Indian culture"
                }
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2,
              "position": [
                128,
                0
              ],
              "id": "9fd9fc0d-7b84-4b75-a977-15a25cabaae7",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "model": {
                  "__rl": true,
                  "mode": "list",
                  "value": "gpt-4.1-mini"
                },
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "typeVersion": 1.2,
              "position": [
                0,
                304
              ],
              "id": "d7a7545a-7a96-4a33-8511-fe30efd886a3",
              "name": "OpenAI Chat Model",
              "credentials": {
                "openAiApi": {
                  "id": "L3P9Ae81haTD2rYm",
                  "name": "OpenAi account"
                }
              }
            },
            {
              "parameters": {
                "sessionIdType": "customKey",
                "sessionKey": "={{ $('Webhook').item.json.body.contactId }}",
                "contextWindowLength": 10
              },
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                208,
                288
              ],
              "id": "13f11335-72c5-4c48-aad2-a831edd30b7f",
              "name": "Simple Memory"
            },
            {
              "parameters": {
                "operation": "append",
                "documentId": {
                  "__rl": true,
                  "value": "1M1XN4sMtqArVajj58Kp3VYygN6DItBQg_uxM6yJ5QtM",
                  "mode": "list",
                  "cachedResultName": "Instagram plus manychat",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1XN4sMtqArVajj58Kp3VYygN6DItBQg_uxM6yJ5QtM/edit?usp=drivesdk"
                },
                "sheetName": {
                  "__rl": true,
                  "value": "gid=0",
                  "mode": "list",
                  "cachedResultName": "Sheet1",
                  "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1XN4sMtqArVajj58Kp3VYygN6DItBQg_uxM6yJ5QtM/edit#gid=0"
                },
                "columns": {
                  "mappingMode": "defineBelow",
                  "value": {
                    "Email ID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Email_ID', ``, 'string') }}",
                    "Summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
                  },
                  "matchingColumns": [],
                  "schema": [
                    {
                      "id": "Email ID",
                      "displayName": "Email ID",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    },
                    {
                      "id": "Summary",
                      "displayName": "Summary",
                      "required": false,
                      "defaultMatch": false,
                      "display": true,
                      "type": "string",
                      "canBeUsedToMatch": true
                    }
                  ],
                  "attemptToConvertTypes": false,
                  "convertFieldsToString": false
                },
                "options": {}
              },
              "type": "n8n-nodes-base.googleSheetsTool",
              "typeVersion": 4.6,
              "position": [
                416,
                272
              ],
              "id": "08ceb830-1c48-4047-972a-528c3501f12e",
              "name": "Append row in sheet in Google Sheets",
              "credentials": {
                "googleSheetsOAuth2Api": {
                  "id": "Nn6MoNvB7CWuaQp9",
                  "name": "Lakshit Account"
                }
              }
            }
          ],
          "connections": {
            "Webhook": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent": {
              "main": [
                [
                  {
                    "node": "Respond to Webhook",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory": {
              "ai_memory": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            },
            "Append row in sheet in Google Sheets": {
              "ai_tool": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_tool",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "5e69032c-68fc-404c-97e0-6773b4811cf9",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-07-30T18:04:00.577Z",
          "updatedAt": "2025-08-15T08:18:22.000Z",
          "id": "nzpVQzh8PIMOP5Ds",
          "name": "My workflow",
          "active": true,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "httpMethod": "POST",
                "path": "4b4f60e5-fa81-411f-b160-7fa6218881e6",
                "responseMode": "responseNode",
                "options": {}
              },
              "type": "n8n-nodes-base.webhook",
              "typeVersion": 2,
              "position": [
                -368,
                0
              ],
              "id": "0d2924f5-5619-4533-a875-6bfe2eb0ba21",
              "name": "Webhook",
              "webhookId": "4b4f60e5-fa81-411f-b160-7fa6218881e6"
            },
            {
              "parameters": {
                "respondWith": "json",
                "responseBody": "={\n  \"message\": \"{{ $json.output }}\"\n} ",
                "options": {}
              },
              "type": "n8n-nodes-base.respondToWebhook",
              "typeVersion": 1.4,
              "position": [
                304,
                0
              ],
              "id": "2a2f71f0-61b3-4cc2-abdd-91db32044a43",
              "name": "Respond to Webhook"
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "={{ $json.body.text }}",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.agent",
              "typeVersion": 2.1,
              "position": [
                -112,
                0
              ],
              "id": "c60392f1-867d-44ac-b0eb-b148b343f62c",
              "name": "AI Agent"
            },
            {
              "parameters": {
                "sessionIdType": "customKey",
                "sessionKey": "test"
              },
              "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
              "typeVersion": 1.3,
              "position": [
                16,
                208
              ],
              "id": "d907cbe6-8a8d-492d-bf41-0010c7d20a45",
              "name": "Simple Memory"
            },
            {
              "parameters": {
                "model": "openai/gpt-oss-20b:free",
                "options": {}
              },
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
              "typeVersion": 1,
              "position": [
                -176,
                192
              ],
              "id": "fc608892-7b57-4caf-99ba-4092112a7e00",
              "name": "OpenRouter Chat Model",
              "credentials": {
                "openRouterApi": {
                  "id": "TLy9RuRkIKncoUiy",
                  "name": "OpenRouter Freelance account"
                }
              }
            }
          ],
          "connections": {
            "Webhook": {
              "main": [
                [
                  {
                    "node": "AI Agent",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "AI Agent": {
              "main": [
                [
                  {
                    "node": "Respond to Webhook",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Simple Memory": {
              "ai_memory": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_memory",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenRouter Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "AI Agent",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "4b1f553e-f397-414f-9500-18bffc008b85",
          "triggerCount": 1,
          "tags": []
        }
      },
      {
        "json": {
          "createdAt": "2025-08-12T12:43:21.204Z",
          "updatedAt": "2025-08-12T14:54:00.000Z",
          "id": "tCPJWe6HpFbiQWyW",
          "name": "38_n8n_new_update",
          "active": false,
          "isArchived": false,
          "nodes": [
            {
              "parameters": {
                "url": "https://github.com/n8n-io/n8n/releases.atom",
                "options": {}
              },
              "id": "462d25dc-79f6-45b1-af5a-882249ed7248",
              "name": "HTTP - GitHub Releases (Atom)",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4,
              "position": [
                -16,
                1728
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "84fdf54d-421d-4cd3-bf1b-bdd81b95feed",
              "name": "XML → JSON (Releases)",
              "type": "n8n-nodes-base.xml",
              "typeVersion": 1,
              "position": [
                224,
                1728
              ]
            },
            {
              "parameters": {
                "functionCode": "function toISO(s){try{return new Date(s).toISOString()}catch(e){return null}}\nfunction idHash(s){let h=5381;for(let i=0;i<s.length;i++){h=((h<<5)+h)+s.charCodeAt(i);h&=0xffffffff}return (h>>>0).toString(16)}\n\nconst feed=$json.feed||{};\nconst entries=Array.isArray(feed.entry)?feed.entry:(feed.entry?[feed.entry]:[]);\nconst out=[];\nfor(const e of entries){\n  const title=(e.title&&(e.title._||e.title))||'';\n  const links=Array.isArray(e.link)?e.link:(e.link?[e.link]:[]);\n  const link=links.find(l=>!l.$||l.$.rel!==\"self\")||links[0]||{};\n  const url=(link.$&&(link.$.href||link.href))||link.href||e.id||'';\n  const pub=e.updated||e.published||feed.updated||null;\n  const subtitle=(e.summary&&(e.summary._||e.summary))||(e.content&&(e.content._||e.content))||null;\n  const source='release';\n  const key=`${source}::${title}::${url}`;\n  out.push({\n    source,\n    title:String(title||'').trim(),\n    url:String(url||'').trim(),\n    publishedAt:toISO(pub),\n    subtitle:subtitle?String(subtitle).trim():null,\n    version:null,\n    tags:[],\n    id:idHash(key),\n    raw:e\n  });\n}\nreturn out.map(j=>({json:j}));"
              },
              "id": "234b79fa-fabf-4d03-a73f-5aa71333291e",
              "name": "Normalize: Releases → unified",
              "type": "n8n-nodes-base.function",
              "typeVersion": 1,
              "position": [
                448,
                1728
              ]
            },
            {
              "parameters": {
                "functionCode": "const versionRegex=/(?:n8n@|v)\\s*([0-9]+\\.[0-9]+\\.[0-9]+)/i;\nfor(const it of items){\n  const j=it.json;\n  const m=(j.title||'').match(versionRegex);\n  if(m) j.version=m[1];\n  if(j.version) j.tags.push('release');\n}\nreturn items;"
              },
              "id": "93d0db2a-2192-4002-9878-164910ad4d18",
              "name": "Enrich (version + tags)",
              "type": "n8n-nodes-base.function",
              "typeVersion": 1,
              "position": [
                640,
                1728
              ]
            },
            {
              "parameters": {
                "functionCode": "const sd=this.getWorkflowStaticData('global');\nif(!sd.seenIds) sd.seenIds=[];\nconst seen=new Set(sd.seenIds);\nconst fresh=[];\nfor(const it of items){const id=it.json.id;if(!seen.has(id)){fresh.push(it);seen.add(id)}}\nsd.seenIds=Array.from(seen);\nreturn fresh.length?fresh:[{json:{info:'no-new-items'}}];"
              },
              "id": "9a22ed77-8eb6-4ff2-aef0-bbe00eeacb67",
              "name": "Dedupe (workflow static data)",
              "type": "n8n-nodes-base.function",
              "typeVersion": 1,
              "position": [
                848,
                1728
              ]
            },
            {
              "parameters": {
                "functionCode": "function mdLink(t,u){return `<${u}|${String(t).replace(/\\n/g,' ')}>`}\nif(items.length===1&&items[0].json.info==='no-new-items'){\n  return[{json:{digest:{items:[],blocks:[{type:'header',text:{type:'plain_text',text:'n8n Weekly Updates',emoji:true}},{type:'section',text:{type:'mrkdwn',text:'No new official updates this week ✅'}}]}}}];\n}\nconst list=items.map(x=>x.json).sort((a,b)=>String(b.publishedAt||'').localeCompare(String(a.publishedAt||'')));\nconst blocks=[{type:'header',text:{type:'plain_text',text:'n8n Weekly Updates',emoji:true}},{type:'context',elements:[{type:'mrkdwn',text:`Week of ${new Date().toLocaleDateString('en-GB')}`}]},{type:'divider'},{type:'section',text:{type:'mrkdwn',text:':tada: *Releases*'}},{type:'section',text:{type:'mrkdwn',text:list.slice(0,5).map(i=>{const v=i.version?` • *v${i.version}*`:'';const d=i.publishedAt?` • ${new Date(i.publishedAt).toLocaleDateString('en-GB')}`:'';return `• ${mdLink(i.title,i.url)}${v}${d}`}).join('\\n')}}];\nreturn[{json:{digest:{items:list,blocks}}}];"
              },
              "id": "7de49aae-1238-432d-9966-3f105b500c74",
              "name": "Build Digest (items + Slack blocks)",
              "type": "n8n-nodes-base.function",
              "typeVersion": 1,
              "position": [
                1040,
                1728
              ]
            },
            {
              "parameters": {
                "authentication": "oAuth2",
                "select": "channel",
                "channelId": {
                  "__rl": true,
                  "value": "C09ADULQJG1",
                  "mode": "list",
                  "cachedResultName": "n8n-update"
                },
                "messageType": "block",
                "blocksUi": "={{ $json.digest.items[0].subtitle }}",
                "text": "=",
                "otherOptions": {}
              },
              "type": "n8n-nodes-base.slack",
              "typeVersion": 2.3,
              "position": [
                1248,
                1728
              ],
              "id": "0e5a88f9-3178-45c7-b3a8-5a65a0def356",
              "name": "Send a message",
              "webhookId": "07e819b5-37bb-4769-bd7c-b366ea5054f2",
              "credentials": {
                "slackOAuth2Api": {
                  "id": "ZC8Jm1dyTNehWjKR",
                  "name": "Slack account"
                }
              }
            },
            {
              "parameters": {
                "jsCode": "// Build final summary - NO external dependencies\n\nif ($input.all().length === 1 && $input.all()[0].json.message) {\n  return $input.all(); // Pass through \"no new items\" message\n}\n\n// Group by source\nconst grouped = {};\nconst allItems = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  allItems.push(data);\n  \n  if (!grouped[data.source]) {\n    grouped[data.source] = [];\n  }\n  grouped[data.source].push(data);\n}\n\n// Sort by date\nfor (const source in grouped) {\n  grouped[source].sort((a, b) => {\n    const dateA = new Date(a.publishedAt || 0);\n    const dateB = new Date(b.publishedAt || 0);\n    return dateB - dateA;\n  });\n}\n\n// Build summary\nconst summary = {\n  totalItems: allItems.length,\n  weekOf: new Date().toLocaleDateString('en-GB'),\n  generatedAt: new Date().toISOString(),\n  bySource: {},\n  allItems: allItems.sort((a, b) => {\n    const dateA = new Date(a.publishedAt || 0);\n    const dateB = new Date(b.publishedAt || 0);\n    return dateB - dateA;\n  })\n};\n\n// Add source breakdown\nfor (const [source, items] of Object.entries(grouped)) {\n  summary.bySource[source] = {\n    count: items.length,\n    latest: items[0]?.title || 'N/A',\n    items: items.slice(0, 10)\n  };\n}\n\n// Create text summary\nlet textSummary = `n8n Weekly Updates - ${summary.weekOf}\\n`;\ntextSummary += `Total: ${summary.totalItems} new items\\n\\n`;\n\nconst sourceEmojis = {\n  release: '🎉 Releases',\n  blog: '📰 Blog Posts', \n  docs: '📚 Documentation',\n  forum: '📢 Announcements'\n};\n\nfor (const [source, data] of Object.entries(summary.bySource)) {\n  if (data.count > 0) {\n    textSummary += `${sourceEmojis[source] || source}: ${data.count} items\\n`;\n    for (const item of data.items.slice(0, 5)) {\n      const date = item.publishedAt ? new Date(item.publishedAt).toLocaleDateString('en-GB') : 'No date';\n      const version = item.version ? ` (v${item.version})` : '';\n      textSummary += `  • ${item.title}${version} - ${date}\\n`;\n      if (item.url) textSummary += `    ${item.url}\\n`;\n    }\n    textSummary += '\\n';\n  }\n}\n\nreturn [{ json: { summary, textSummary } }];"
              },
              "id": "f9bbc64a-f088-4af0-9d38-d2ed2ef56ccf",
              "name": "Build Summary",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                944,
                160
              ]
            },
            {
              "parameters": {
                "jsCode": "// Simple deduplication within current execution - NO external dependencies\n// This will dedupe items within this single run (not across workflow executions)\n\nconst seenIds = new Set();\nconst newItems = [];\nconst duplicateItems = [];\n\nfor (const item of $input.all()) {\n  const id = item.json.id;\n  if (!seenIds.has(id)) {\n    newItems.push(item);\n    seenIds.add(id);\n  } else {\n    duplicateItems.push(item);\n  }\n}\n\nconsole.log(`Total items: ${$input.all().length}`);\nconsole.log(`Unique items: ${newItems.length}`);\nconsole.log(`Duplicates removed: ${duplicateItems.length}`);\n\nif (newItems.length === 0) {\n  return [{ json: { message: 'No items found', totalChecked: $input.all().length } }];\n}\n\n// Sort by date (newest first)\nnewItems.sort((a, b) => {\n  const dateA = new Date(a.json.publishedAt || 0);\n  const dateB = new Date(b.json.publishedAt || 0);\n  return dateB - dateA;\n});\n\nreturn newItems;"
              },
              "id": "b7ad585a-b6fa-4c26-95b8-88472330a21a",
              "name": "Remove Duplicates",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                736,
                160
              ]
            },
            {
              "parameters": {
                "jsCode": "// Extract versions and add tags - NO external dependencies\nconst versionRegex = /(?:n8n@|version |v)\\s*([0-9]+\\.[0-9]+\\.[0-9]+)/i;\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  // Extract version from title\n  const versionMatch = data.title.match(versionRegex);\n  if (versionMatch) {\n    data.version = versionMatch[1];\n    if (!data.tags.includes('release')) {\n      data.tags.push('versioned');\n    }\n  }\n  \n  // Add tags based on content\n  const titleLower = data.title.toLowerCase();\n  if (titleLower.includes('security')) data.tags.push('security');\n  if (titleLower.includes('fix')) data.tags.push('bugfix');\n  if (titleLower.includes('feat') || titleLower.includes('feature')) data.tags.push('feature');\n  if (titleLower.includes('breaking')) data.tags.push('breaking-change');\n}\n\nreturn $input.all();"
              },
              "id": "1c40b410-6e67-44ba-a460-38542bda85a3",
              "name": "Add Versions & Tags",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                544,
                160
              ]
            },
            {
              "parameters": {},
              "id": "378d793d-92e6-4bc9-a47d-7aa5b40d350f",
              "name": "Merge All",
              "type": "n8n-nodes-base.merge",
              "typeVersion": 2,
              "position": [
                336,
                160
              ]
            },
            {
              "parameters": {
                "jsCode": "// Process Atom feeds - Pure JavaScript XML parsing\n\n// Simple hash using built-in JS only\nfunction makeId(input) {\n  let result = 0;\n  for (let i = 0; i < input.length; i++) {\n    result = ((result << 5) - result) + input.charCodeAt(i);\n    result = result & result; // 32-bit integer\n  }\n  return Math.abs(result).toString();\n}\n\nfunction cleanDate(dateStr) {\n  if (!dateStr) return null;\n  try {\n    return new Date(dateStr).toISOString();\n  } catch {\n    return null;\n  }\n}\n\n// Simple XML text extraction - no external dependencies\nfunction extractXMLValue(xml, tagName) {\n  const regex = new RegExp(`<${tagName}[^>]*>(.*?)<\\/${tagName}>`, 'gi');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(xml)) !== null) {\n    matches.push(match[1].trim());\n  }\n  return matches;\n}\n\nfunction extractXMLAttribute(xml, tagName, attribute) {\n  const regex = new RegExp(`<${tagName}[^>]*${attribute}=[\"']([^\"']*)[\"'][^>]*>`, 'gi');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(xml)) !== null) {\n    matches.push(match[1]);\n  }\n  return matches;\n}\n\nfunction parseSimpleAtom(xmlContent, sourceType) {\n  const entries = [];\n  \n  // Split by entry tags\n  const entryMatches = xmlContent.match(/<entry[^>]*>.*?<\\/entry>/gis);\n  if (!entryMatches) return entries;\n  \n  for (const entryXML of entryMatches) {\n    const titles = extractXMLValue(entryXML, 'title');\n    const updateds = extractXMLValue(entryXML, 'updated');\n    const publisheds = extractXMLValue(entryXML, 'published');\n    const summaries = extractXMLValue(entryXML, 'summary');\n    const contents = extractXMLValue(entryXML, 'content');\n    const hrefs = extractXMLAttribute(entryXML, 'link', 'href');\n    \n    const title = (titles[0] || '').trim();\n    const url = (hrefs.find(h => !h.includes('comments')) || hrefs[0] || '').trim();\n    const publishedAt = cleanDate(updateds[0] || publisheds[0]);\n    const subtitle = (summaries[0] || contents[0] || '').trim().substring(0, 200);\n    \n    if (title) {\n      entries.push({\n        source: sourceType,\n        title,\n        url,\n        publishedAt,\n        subtitle: subtitle || null,\n        version: null,\n        tags: [sourceType === 'release' ? 'release' : sourceType === 'docs' ? 'docs-update' : 'dev-activity'],\n        id: makeId(sourceType + title + url),\n        raw: { title, url, publishedAt, subtitle }\n      });\n    }\n  }\n  \n  return entries;\n}\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const xmlContent = item.json;\n  let sourceType = 'unknown';\n  \n  if (item.node === 'Releases Atom') sourceType = 'release';\n  else if (item.node === 'Docs Atom') sourceType = 'docs';\n  \n  try {\n    if (typeof xmlContent === 'string') {\n      const parsed = parseSimpleAtom(xmlContent, sourceType);\n      results.push(...parsed);\n    } else {\n      console.log(`Invalid XML content for ${sourceType}`);\n    }\n  } catch (error) {\n    console.log(`Error parsing ${sourceType}:`, error.message);\n  }\n}\n\nreturn results.map(item => ({ json: item }));"
              },
              "id": "2513cbbc-1b88-4bf2-8e6b-77563f4051ef",
              "name": "Process Atom Feeds",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                144,
                240
              ]
            },
            {
              "parameters": {
                "jsCode": "// Process RSS feeds - NO external dependencies\n\n// Simple hash using built-in JS only\nfunction makeId(input) {\n  let result = 0;\n  for (let i = 0; i < input.length; i++) {\n    result = ((result << 5) - result) + input.charCodeAt(i);\n    result = result & result; // 32-bit integer\n  }\n  return Math.abs(result).toString();\n}\n\nfunction cleanDate(dateStr) {\n  if (!dateStr) return null;\n  try {\n    return new Date(dateStr).toISOString();\n  } catch {\n    return null;\n  }\n}\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  let source = 'unknown';\n  if (item.node === 'n8n Blog RSS') source = 'blog';\n  else if (item.node === 'Forum RSS') source = 'forum';\n  \n  const title = (data.title || '').trim();\n  const url = (data.link || data.url || '').trim();\n  const publishedAt = cleanDate(data.pubDate || data.isoDate || data.published);\n  const subtitle = data.contentSnippet || data.content || data.summary || null;\n  \n  results.push({\n    source,\n    title,\n    url,\n    publishedAt,\n    subtitle: subtitle ? subtitle.trim().substring(0, 200) : null,\n    version: null,\n    tags: [source === 'blog' ? 'news' : 'announcement'],\n    id: makeId(source + title + url),\n    raw: data\n  });\n}\n\nreturn results.map(item => ({ json: item }));"
              },
              "id": "52673e1e-0e59-480d-b603-a37d4ac9f4ba",
              "name": "Process RSS Feeds",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                144,
                80
              ]
            },
            {
              "parameters": {
                "url": "https://github.com/n8n-io/n8n-docs/commits.atom",
                "options": {
                  "response": {
                    "response": {
                      "responseFormat": "text"
                    }
                  }
                }
              },
              "id": "e2550c82-a702-48ae-8e68-0d7a36af362a",
              "name": "Docs Atom",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4,
              "position": [
                -64,
                432
              ]
            },
            {
              "parameters": {
                "url": "https://github.com/n8n-io/n8n/releases.atom",
                "options": {
                  "response": {
                    "response": {
                      "responseFormat": "text"
                    }
                  }
                }
              },
              "id": "5dff058a-92e0-405b-ad8f-1bbf2dd88850",
              "name": "Releases Atom",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4,
              "position": [
                -64,
                224
              ]
            },
            {
              "parameters": {
                "url": "https://community.n8n.io/c/announcements/11.rss",
                "options": {}
              },
              "id": "eb595dd8-a305-4671-9d11-ba06d8401438",
              "name": "Forum RSS",
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1,
              "position": [
                -64,
                48
              ]
            },
            {
              "parameters": {
                "url": "https://blog.n8n.io/rss/",
                "options": {}
              },
              "id": "960db50f-5b75-44da-adfb-271398a9f0e4",
              "name": "n8n Blog RSS",
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1,
              "position": [
                -64,
                -144
              ]
            },
            {
              "parameters": {},
              "id": "ae67ff8b-7269-42f8-8496-3d9876c719b2",
              "name": "Weekly Trigger",
              "type": "n8n-nodes-base.cron",
              "typeVersion": 1,
              "position": [
                -256,
                96
              ]
            },
            {
              "parameters": {
                "url": "https://blog.n8n.io/rss/",
                "options": {}
              },
              "id": "ddfe8e04-f28a-457b-8f7a-30378d2e189a",
              "name": "Blog RSS",
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1,
              "position": [
                -176,
                736
              ]
            },
            {
              "parameters": {
                "url": "https://github.com/n8n-io/n8n/releases.atom",
                "options": {
                  "response": {
                    "response": {
                      "responseFormat": "text"
                    }
                  }
                }
              },
              "id": "a1f743d5-7956-4b80-9b04-09e26d2052e8",
              "name": "Releases",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4,
              "position": [
                -176,
                1136
              ]
            },
            {
              "parameters": {
                "url": "https://github.com/n8n-io/n8n-docs/commits.atom",
                "options": {
                  "response": {
                    "response": {
                      "responseFormat": "text"
                    }
                  }
                }
              },
              "id": "dc6289b6-e794-4443-af6f-53ead02f72c5",
              "name": "Docs",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 4,
              "position": [
                -176,
                1360
              ]
            },
            {
              "parameters": {
                "jsCode": "function hash(str) { let h=0; for(let i=0;i<str.length;i++) h=((h<<5)-h)+str.charCodeAt(i)&0xffffffff; return Math.abs(h).toString(); }\nfunction date(d) { try { return new Date(d).toISOString(); } catch { return null; } }\nconst out=[]; for(const item of $input.all()) { const d=item.json; let src='unknown'; if(item.node==='Blog RSS') src='blog'; else if(item.node==='Forum RSS') src='forum'; const title=(d.title||'').trim(); const url=(d.link||d.url||'').trim(); out.push({json:{source:src,title,url,publishedAt:date(d.pubDate||d.isoDate),subtitle:d.contentSnippet||null,version:null,tags:[src==='blog'?'news':'announcement'],id:hash(src+title+url)}}); } return out;"
              },
              "id": "2c902e5b-fa40-4be1-81f1-618ef3550ec7",
              "name": "Process RSS",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                32,
                912
              ]
            },
            {
              "parameters": {
                "jsCode": "function hash(str) { let h=0; for(let i=0;i<str.length;i++) h=((h<<5)-h)+str.charCodeAt(i)&0xffffffff; return Math.abs(h).toString(); }\nfunction date(d) { try { return new Date(d).toISOString(); } catch { return null; } }\nfunction xml(content,tag) { const r=new RegExp(`<${tag}[^>]*>(.*?)</${tag}>`,'gi'); const m=[]; let x; while((x=r.exec(content))) m.push(x[1].trim()); return m; }\nfunction attr(content,tag,a) { const r=new RegExp(`<${tag}[^>]*${a}=[\"']([^\"']*)[\"']`,'gi'); const m=[]; let x; while((x=r.exec(content))) m.push(x[1]); return m; }\nconst out=[]; for(const item of $input.all()) { const content=item.json; let src='unknown'; if(item.node==='Releases') src='release'; else if(item.node==='Docs') src='docs'; if(typeof content==='string') { const entries=content.match(/<entry[^>]*>.*?<\\/entry>/gis)||[]; for(const e of entries) { const titles=xml(e,'title'); const dates=xml(e,'updated').concat(xml(e,'published')); const hrefs=attr(e,'link','href'); const title=titles[0]||''; const url=hrefs[0]||''; if(title) out.push({json:{source:src,title,url,publishedAt:date(dates[0]),subtitle:null,version:null,tags:[src==='release'?'release':'docs'],id:hash(src+title+url)}}); } } } return out;"
              },
              "id": "85c5d64a-a1fd-4517-b837-c497b296479f",
              "name": "Process Atom",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                32,
                1072
              ],
              "alwaysOutputData": true
            },
            {
              "parameters": {},
              "id": "b2b07f05-a4a5-4920-b90b-3ce5c1170b91",
              "name": "Merge",
              "type": "n8n-nodes-base.merge",
              "typeVersion": 2,
              "position": [
                224,
                992
              ]
            },
            {
              "parameters": {
                "jsCode": "const vr=/(?:n8n@|v)\\s*([0-9]+\\.[0-9]+\\.[0-9]+)/i; for(const item of $input.all()) { const d=item.json; const m=d.title.match(vr); if(m) d.version=m[1]; const t=d.title.toLowerCase(); if(t.includes('fix')) d.tags.push('fix'); if(t.includes('feat')) d.tags.push('feature'); } return $input.all();"
              },
              "id": "8e3df25d-c586-43ae-974a-a51500dde1a3",
              "name": "Add Versions",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                432,
                992
              ]
            },
            {
              "parameters": {
                "jsCode": "const seen=new Set(); const out=[]; for(const item of $input.all()) { if(!seen.has(item.json.id)) { seen.add(item.json.id); out.push(item); } } return out.length ? out : [{json:{message:'No items'}}];"
              },
              "id": "1527f448-71fa-4be9-8be6-1af7075985c8",
              "name": "Dedupe",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                624,
                992
              ]
            },
            {
              "parameters": {
                "jsCode": "const cutoff=new Date(Date.now()-7*24*60*60*1000); const out=[]; for(const item of $input.all()) { if(item.json.publishedAt && new Date(item.json.publishedAt)>=cutoff) out.push(item); else if(!item.json.publishedAt) out.push(item); } return out.length ? out : [{json:{message:'No recent items'}}];"
              },
              "id": "06c70f3e-7e2e-43ec-a004-5f9f686000a9",
              "name": "Filter Week",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                832,
                992
              ]
            },
            {
              "parameters": {},
              "id": "613167e9-d8cb-49ce-afe6-5febe8483521",
              "name": "Weekly Trigger1",
              "type": "n8n-nodes-base.cron",
              "typeVersion": 1,
              "position": [
                -384,
                976
              ]
            },
            {
              "parameters": {
                "url": "https://community.n8n.io/c/announcements/11.rss",
                "options": {}
              },
              "id": "6325a782-3b50-4ef4-9a63-2646ef59368c",
              "name": "Forum RSS1",
              "type": "n8n-nodes-base.rssFeedRead",
              "typeVersion": 1,
              "position": [
                -176,
                928
              ]
            },
            {
              "parameters": {
                "jsCode": "if($input.all().length===1 && $input.all()[0].json.message) return $input.all(); const g={}; for(const item of $input.all()) { const d=item.json; if(!g[d.source]) g[d.source]=[]; g[d.source].push(d); } let text=`n8n Updates - ${new Date().toLocaleDateString()}\\nTotal: ${$input.all().length} items\\n\\n`; const e={release:'🎉 Releases',blog:'📰 Blog',docs:'📚 Docs',forum:'📢 Forum'}; for(const [k,v] of Object.entries(g)) { if(v.length) { text+=`${e[k]||k}: ${v.length}\\n`; v.sort((a,b)=>new Date(b.publishedAt||0)-new Date(a.publishedAt||0)).slice(0,5).forEach(i=>{ const d=i.publishedAt?new Date(i.publishedAt).toLocaleDateString():''; const ver=i.version?` (v${i.version})`:''; text+=`  • ${i.title}${ver} - ${d}\\n    ${i.url}\\n`; }); text+='\\n'; } } return [{json:{summary:g,text}}];"
              },
              "id": "faae13e3-b087-4d1b-b6e0-7547abf0827d",
              "name": "Build Summary1",
              "type": "n8n-nodes-base.code",
              "typeVersion": 2,
              "position": [
                1024,
                992
              ]
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "99349feb-9807-4b13-9027-56afc397e0fc",
              "name": "XML → JSON (Releases)1",
              "type": "n8n-nodes-base.xml",
              "typeVersion": 1,
              "position": [
                96,
                1328
              ]
            },
            {
              "parameters": {},
              "type": "n8n-nodes-base.manualTrigger",
              "typeVersion": 1,
              "position": [
                -256,
                1728
              ],
              "id": "7e96bea7-3cdf-49d1-beed-b831c4935b6f",
              "name": "When clicking ‘Execute workflow’"
            }
          ],
          "connections": {
            "HTTP - GitHub Releases (Atom)": {
              "main": [
                [
                  {
                    "node": "XML → JSON (Releases)",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "XML → JSON (Releases)": {
              "main": [
                [
                  {
                    "node": "Normalize: Releases → unified",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Normalize: Releases → unified": {
              "main": [
                [
                  {
                    "node": "Enrich (version + tags)",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Enrich (version + tags)": {
              "main": [
                [
                  {
                    "node": "Dedupe (workflow static data)",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Dedupe (workflow static data)": {
              "main": [
                [
                  {
                    "node": "Build Digest (items + Slack blocks)",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Build Digest (items + Slack blocks)": {
              "main": [
                [
                  {
                    "node": "Send a message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Remove Duplicates": {
              "main": [
                [
                  {
                    "node": "Build Summary",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Versions & Tags": {
              "main": [
                [
                  {
                    "node": "Remove Duplicates",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Merge All": {
              "main": [
                [
                  {
                    "node": "Add Versions & Tags",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Process Atom Feeds": {
              "main": [
                [
                  {
                    "node": "Merge All",
                    "type": "main",
                    "index": 1
                  }
                ]
              ]
            },
            "Process RSS Feeds": {
              "main": [
                [
                  {
                    "node": "Merge All",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Docs Atom": {
              "main": [
                [
                  {
                    "node": "Process Atom Feeds",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Releases Atom": {
              "main": [
                [
                  {
                    "node": "Process Atom Feeds",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Forum RSS": {
              "main": [
                [
                  {
                    "node": "Process RSS Feeds",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "n8n Blog RSS": {
              "main": [
                [
                  {
                    "node": "Process RSS Feeds",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Weekly Trigger": {
              "main": [
                [
                  {
                    "node": "n8n Blog RSS",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Forum RSS",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Releases Atom",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Docs Atom",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Blog RSS": {
              "main": [
                [
                  {
                    "node": "Process RSS",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Releases": {
              "main": [
                [
                  {
                    "node": "Process Atom",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Docs": {
              "main": [
                [
                  {
                    "node": "XML → JSON (Releases)1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Process RSS": {
              "main": [
                [
                  {
                    "node": "Merge",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Process Atom": {
              "main": [
                [
                  {
                    "node": "Merge",
                    "type": "main",
                    "index": 1
                  }
                ]
              ]
            },
            "Merge": {
              "main": [
                [
                  {
                    "node": "Add Versions",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add Versions": {
              "main": [
                [
                  {
                    "node": "Dedupe",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Dedupe": {
              "main": [
                [
                  {
                    "node": "Filter Week",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Filter Week": {
              "main": [
                [
                  {
                    "node": "Build Summary1",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Weekly Trigger1": {
              "main": [
                [
                  {
                    "node": "Blog RSS",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Forum RSS1",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Releases",
                    "type": "main",
                    "index": 0
                  },
                  {
                    "node": "Docs",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Forum RSS1": {
              "main": [
                [
                  {
                    "node": "Process RSS",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking ‘Execute workflow’": {
              "main": [
                [
                  {
                    "node": "HTTP - GitHub Releases (Atom)",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": {
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "388b3600-4975-45ec-a335-01910d1edb3f",
          "triggerCount": 0,
          "tags": []
        }
      }
    ]
  },
  "versionId": "803a4a24-8012-48bf-92bd-8c81261991ee",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-16T18:37:22.925Z",
      "updatedAt": "2025-08-16T18:37:22.925Z",
      "role": "workflow:owner",
      "workflowId": "EjPmdfDXn9tdS2sy",
      "projectId": "iOyc3VpWKvgHH9fv"
    }
  ],
  "tags": []
}